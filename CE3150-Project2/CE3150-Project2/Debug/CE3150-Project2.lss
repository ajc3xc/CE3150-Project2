
CE3150-Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000007e0  00000874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800106  00800106  0000087a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001045  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bbb  00000000  00000000  000019d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083c  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000670  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000493  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003a5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_15>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e0 ee       	ldi	r30, 0xE0	; 224
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a6 e0       	ldi	r26, 0x06	; 6
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ae 31       	cpi	r26, 0x1E	; 30
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 f5 02 	call	0x5ea	; 0x5ea <main>
 102:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <time>:
 10a:	fc 01       	movw	r30, r24
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <__system_time>
 114:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <__system_time+0x1>
 118:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__system_time+0x2>
 11c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__system_time+0x3>
 120:	0f be       	out	0x3f, r0	; 63
 122:	30 97       	sbiw	r30, 0x00	; 0
 124:	21 f0       	breq	.+8      	; 0x12e <time+0x24>
 126:	60 83       	st	Z, r22
 128:	71 83       	std	Z+1, r23	; 0x01
 12a:	82 83       	std	Z+2, r24	; 0x02
 12c:	93 83       	std	Z+3, r25	; 0x03
 12e:	08 95       	ret

00000130 <initialize_ports>:
//////////////////////////////////////////////////////////////////////////
//						Initialization Functions						//

void initialize_ports()
{
	DDRA = 0x00; //PINA input
 130:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xFF; //DDRD input
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0b00110000; //outputs PINE bits 5, 4, inputs bit 6
 136:	90 e3       	ldi	r25, 0x30	; 48
 138:	9d b9       	out	0x0d, r25	; 13
	
	//0 means on, 1 means off
	PORTA |= 0xFF;
 13a:	92 b1       	in	r25, 0x02	; 2
 13c:	82 b9       	out	0x02, r24	; 2
	PORTD |= 0xFF; //turn off portd
 13e:	9b b1       	in	r25, 0x0b	; 11
 140:	8b b9       	out	0x0b, r24	; 11
	PORTE |= 0b00110000; //turn off port e
 142:	8e b1       	in	r24, 0x0e	; 14
 144:	80 63       	ori	r24, 0x30	; 48
 146:	8e b9       	out	0x0e, r24	; 14
 148:	08 95       	ret

0000014a <start_minute_time_limit>:
//////////////////////////////////////////////////////////////////////////
//						 Time Delay Functions							//
//1 minute time delay
//used when playing the simon game
void start_minute_time_limit() {
	TCNT1 = FOUR_SECOND_TIME_VAL;
 14a:	8e ee       	ldi	r24, 0xEE	; 238
 14c:	95 e8       	ldi	r25, 0x85	; 133
 14e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 152:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0x00; //normal clock
 156:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B |= 0x05; // normal clock, prescaler 1024
 15a:	e1 e8       	ldi	r30, 0x81	; 129
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	85 60       	ori	r24, 0x05	; 5
 162:	80 83       	st	Z, r24
	TIMSK1 |= (1 << TOIE1);
 164:	ef e6       	ldi	r30, 0x6F	; 111
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	81 60       	ori	r24, 0x01	; 1
 16c:	80 83       	st	Z, r24
	sei();
 16e:	78 94       	sei
 170:	08 95       	ret

00000172 <__vector_15>:
}

// called every 4 seconds
ISR(TIMER1_OVF_vect) {
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	if (timer_1_iterations_counter < TIMER_1_ITERATIONS) {
 184:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timer_1_iterations_counter>
 188:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timer_1_iterations_counter+0x1>
 18c:	0f 97       	sbiw	r24, 0x0f	; 15
 18e:	84 f4       	brge	.+32     	; 0x1b0 <__vector_15+0x3e>
		TCNT1 = FOUR_SECOND_TIME_VAL;
 190:	8e ee       	ldi	r24, 0xEE	; 238
 192:	95 e8       	ldi	r25, 0x85	; 133
 194:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 198:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		timer_1_iterations_counter++;	
 19c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <timer_1_iterations_counter>
 1a0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <timer_1_iterations_counter+0x1>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timer_1_iterations_counter+0x1>
 1aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timer_1_iterations_counter>
 1ae:	13 c0       	rjmp	.+38     	; 0x1d6 <__vector_15+0x64>
	}
	else
	{
		TIMSK1 &= ~(1 << TOIE1);
 1b0:	ef e6       	ldi	r30, 0x6F	; 111
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	80 83       	st	Z, r24
		TCNT1 = 0;
 1ba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1be:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		timer_1_iterations_counter = 0;
 1c2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <timer_1_iterations_counter+0x1>
 1c6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <timer_1_iterations_counter>
		timed_out = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	}
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <half_second_delay>:

//generates a half second delay on timer 0
// (255 * 1024 * 15) / (8 * 10^6) = .4896 seconds
void half_second_delay()
{
	TCNT0 = HALF_SECOND_TIMER_VAL;
 1e8:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00;
 1ea:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= 0x05; // normal clock, prescaler 1024
 1ec:	85 b5       	in	r24, 0x25	; 37
 1ee:	85 60       	ori	r24, 0x05	; 5
 1f0:	85 bd       	out	0x25, r24	; 37
	
	int counter = 0;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
	while(counter < HALF_SECOND_ITERATIONS)
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <half_second_delay+0x1c>
	{
		//poll until timer overflows
		while (!(TIFR0 & (1<<TOV0)));
 1f8:	a8 9b       	sbis	0x15, 0	; 21
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <half_second_delay+0x10>
		TCNT0 = HALF_SECOND_TIMER_VAL; //reset tcnt0
 1fc:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 1<<TOV0; //need to reset the overflow flag bit
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	25 bb       	out	0x15, r18	; 21
		counter++;
 202:	01 96       	adiw	r24, 0x01	; 1
	TCNT0 = HALF_SECOND_TIMER_VAL;
	TCCR0A = 0x00;
	TCCR0B |= 0x05; // normal clock, prescaler 1024
	
	int counter = 0;
	while(counter < HALF_SECOND_ITERATIONS)
 204:	8f 30       	cpi	r24, 0x0F	; 15
 206:	91 05       	cpc	r25, r1
 208:	bc f3       	brlt	.-18     	; 0x1f8 <half_second_delay+0x10>
		TIFR0 = 1<<TOV0; //need to reset the overflow flag bit
		counter++;
	}
	
	//turn off timer0
	TCCR0A = 0x00;
 20a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 20c:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 1<<TOV0;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret

00000214 <two_to_the_power_of>:
//used by play_sequence function
//returns 2 ^ (power_to + 1)
//must be 1, 2, 3, 4, or it returns 0
int two_to_the_power_of(int power_to)
{
	if ((power_to <= 0) || (power_to > 4)) return 0;
 214:	9c 01       	movw	r18, r24
 216:	21 50       	subi	r18, 0x01	; 1
 218:	31 09       	sbc	r19, r1
 21a:	24 30       	cpi	r18, 0x04	; 4
 21c:	31 05       	cpc	r19, r1
 21e:	78 f4       	brcc	.+30     	; 0x23e <two_to_the_power_of+0x2a>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	04 c0       	rjmp	.+8      	; 0x232 <two_to_the_power_of+0x1e>
	
	int return_val = 1;
	for(int j=0; j <= power_to; j++)
	{
		return_val *= 2;
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
int two_to_the_power_of(int power_to)
{
	if ((power_to <= 0) || (power_to > 4)) return 0;
	
	int return_val = 1;
	for(int j=0; j <= power_to; j++)
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	82 17       	cp	r24, r18
 234:	93 07       	cpc	r25, r19
 236:	cc f7       	brge	.-14     	; 0x22a <two_to_the_power_of+0x16>
	{
		return_val *= 2;
	}
	
	return return_val;
 238:	84 2f       	mov	r24, r20
 23a:	95 2f       	mov	r25, r21
 23c:	08 95       	ret
//used by play_sequence function
//returns 2 ^ (power_to + 1)
//must be 1, 2, 3, 4, or it returns 0
int two_to_the_power_of(int power_to)
{
	if ((power_to <= 0) || (power_to > 4)) return 0;
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
	{
		return_val *= 2;
	}
	
	return return_val;
}
 242:	08 95       	ret

00000244 <play_speaker>:

//plays the speaker for 1 second
void play_speaker(int divisor)
{
 244:	9c 01       	movw	r18, r24
	//divisor must be 2^n
	if (!(divisor && !(divisor & (divisor-1)))) return;
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	a9 f1       	breq	.+106    	; 0x2b4 <play_speaker+0x70>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	82 23       	and	r24, r18
 24e:	93 23       	and	r25, r19
 250:	89 2b       	or	r24, r25
 252:	81 f5       	brne	.+96     	; 0x2b4 <play_speaker+0x70>
	 
	//const int TIMER_VAL = 256/divisor - 1
	const int TIMER_VAL = (255 - ((256/divisor) - 1));
 254:	e0 e0       	ldi	r30, 0x00	; 0
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	cf 01       	movw	r24, r30
 25a:	b9 01       	movw	r22, r18
 25c:	0e 94 07 03 	call	0x60e	; 0x60e <__divmodhi4>
 260:	e6 1b       	sub	r30, r22
 262:	f7 0b       	sbc	r31, r23
	TCNT2 = TIMER_VAL;
 264:	6e 2f       	mov	r22, r30
 266:	e0 93 b2 00 	sts	0x00B2, r30	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	TCCR2A = 0x00; //normal clock
 26a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B |= 0x07; // prescaler 1024
 26e:	e1 eb       	ldi	r30, 0xB1	; 177
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	87 60       	ori	r24, 0x07	; 7
 276:	80 83       	st	Z, r24
	
	int counter = 0;
	const int MAX_ITERATIONS = 30 * divisor;
 278:	8e e1       	ldi	r24, 0x1E	; 30
 27a:	82 9f       	mul	r24, r18
 27c:	a0 01       	movw	r20, r0
 27e:	83 9f       	mul	r24, r19
 280:	50 0d       	add	r21, r0
 282:	11 24       	eor	r1, r1
	TCNT2 = TIMER_VAL;
	
	TCCR2A = 0x00; //normal clock
	TCCR2B |= 0x07; // prescaler 1024
	
	int counter = 0;
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
	const int MAX_ITERATIONS = 30 * divisor;
	//total time = 1024 * (255 - (256/divisor - 1)) * 30 * divisor
	while(counter < MAX_ITERATIONS)
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <play_speaker+0x5e>
	{
		//poll until timer overflows
		while (!(TIFR2 & (1<<TOV2)));
 28a:	b8 9b       	sbis	0x17, 0	; 23
 28c:	fe cf       	rjmp	.-4      	; 0x28a <play_speaker+0x46>
		PORTE ^= (1<<PORTE4); //toggle PORTE6
 28e:	9e b1       	in	r25, 0x0e	; 14
 290:	80 e1       	ldi	r24, 0x10	; 16
 292:	89 27       	eor	r24, r25
 294:	8e b9       	out	0x0e, r24	; 14
		//PORTE ^= (1<<PORTE5); //toggle PORTE5
		TCNT2 = TIMER_VAL; //reset tcnt2
 296:	60 93 b2 00 	sts	0x00B2, r22	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
		TIFR2 = 1<<TOV2; //need to reset the overflow flag bit
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	87 bb       	out	0x17, r24	; 23
		counter++;
 29e:	2f 5f       	subi	r18, 0xFF	; 255
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
	TCCR2B |= 0x07; // prescaler 1024
	
	int counter = 0;
	const int MAX_ITERATIONS = 30 * divisor;
	//total time = 1024 * (255 - (256/divisor - 1)) * 30 * divisor
	while(counter < MAX_ITERATIONS)
 2a2:	24 17       	cp	r18, r20
 2a4:	35 07       	cpc	r19, r21
 2a6:	8c f3       	brlt	.-30     	; 0x28a <play_speaker+0x46>
		TIFR2 = 1<<TOV2; //need to reset the overflow flag bit
		counter++;
	}
	
	//turn off timer0
	TCCR2A = 0x00;
 2a8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0x00;
 2ac:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIFR2 = 1<<TOV2;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	87 bb       	out	0x17, r24	; 23
 2b4:	08 95       	ret

000002b6 <turn_off_leds>:
//					Game End Functions									//

//turn off all the lights
void turn_off_leds()
{
	PORTD = 0xFF;
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	8b b9       	out	0x0b, r24	; 11
	PORTE |= (1<<PORTE5);
 2ba:	8e b1       	in	r24, 0x0e	; 14
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	8e b9       	out	0x0e, r24	; 14
 2c0:	08 95       	ret

000002c2 <generate_simon_pattern>:


//////////////////////////////////////////////////////////////////////////
//					Game Start Functions								//

void generate_simon_pattern(){
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
	//since this can be called multiple times, srand shouldn't be here (it regenerates the same pattern)
	//it should be in main
	for(int i=0 ; i<MAX_LEVEL ; i++){
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
 2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <generate_simon_pattern+0x30>
		SEQUENCE[i] = (rand() % 4) + 1; //generate a random number from 1-4 inclusive
 2cc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <rand>
 2d0:	83 70       	andi	r24, 0x03	; 3
 2d2:	90 78       	andi	r25, 0x80	; 128
 2d4:	99 23       	and	r25, r25
 2d6:	24 f4       	brge	.+8      	; 0x2e0 <generate_simon_pattern+0x1e>
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	8c 6f       	ori	r24, 0xFC	; 252
 2dc:	9f 6f       	ori	r25, 0xFF	; 255
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	fe 01       	movw	r30, r28
 2e4:	ee 0f       	add	r30, r30
 2e6:	ff 1f       	adc	r31, r31
 2e8:	e6 5f       	subi	r30, 0xF6	; 246
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	91 83       	std	Z+1, r25	; 0x01
 2ee:	80 83       	st	Z, r24
//					Game Start Functions								//

void generate_simon_pattern(){
	//since this can be called multiple times, srand shouldn't be here (it regenerates the same pattern)
	//it should be in main
	for(int i=0 ; i<MAX_LEVEL ; i++){
 2f0:	21 96       	adiw	r28, 0x01	; 1
 2f2:	c8 30       	cpi	r28, 0x08	; 8
 2f4:	d1 05       	cpc	r29, r1
 2f6:	54 f3       	brlt	.-44     	; 0x2cc <generate_simon_pattern+0xa>
		SEQUENCE[i] = (rand() % 4) + 1; //generate a random number from 1-4 inclusive
	}
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <lose_game>:

//call the function if the game was lost
void lose_game()
{
	//turn off LEDs
	turn_off_leds();
 2fe:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <turn_off_leds>
	
	//display an x pattern on the LEDs
	PORTD &= ~(1<<PORTD7);
 302:	8b b1       	in	r24, 0x0b	; 11
 304:	8f 77       	andi	r24, 0x7F	; 127
 306:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD5);
 308:	8b b1       	in	r24, 0x0b	; 11
 30a:	8f 7d       	andi	r24, 0xDF	; 223
 30c:	8b b9       	out	0x0b, r24	; 11
	PORTE &= ~(1<<PORTE5);
 30e:	8e b1       	in	r24, 0x0e	; 14
 310:	8f 7d       	andi	r24, 0xDF	; 223
 312:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1<<PORTD2);
 314:	8b b1       	in	r24, 0x0b	; 11
 316:	8b 7f       	andi	r24, 0xFB	; 251
 318:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD0);
 31a:	8b b1       	in	r24, 0x0b	; 11
 31c:	8e 7f       	andi	r24, 0xFE	; 254
 31e:	8b b9       	out	0x0b, r24	; 11
	play_speaker(2);
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
	
	//turn off the LEDs again
	turn_off_leds();
 328:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <turn_off_leds>
	
	
	//reset to level 1
	LVL = 1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <LVL+0x1>
 334:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LVL>
	
	//regenerate pattern for simon board
	generate_simon_pattern();
 338:	0e 94 61 01 	call	0x2c2	; 0x2c2 <generate_simon_pattern>
 33c:	08 95       	ret

0000033e <win_game>:

//call function if the game was won
void win_game()
{
	//turn off LEDs
	turn_off_leds();
 33e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <turn_off_leds>
	
	//turn on all LEDs
	PORTD = 0x00;
 342:	1b b8       	out	0x0b, r1	; 11
	PORTE = ~(1<<PORTE5);
 344:	8f ed       	ldi	r24, 0xDF	; 223
 346:	8e b9       	out	0x0e, r24	; 14
	play_speaker(64);
 348:	80 e4       	ldi	r24, 0x40	; 64
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
	
	//turn off LEDs
	turn_off_leds();
 350:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <turn_off_leds>
	
	//reset to level 1
	LVL = 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <LVL+0x1>
 35c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LVL>
	
	//regenerate pattern for simon board
	generate_simon_pattern();
 360:	0e 94 61 01 	call	0x2c2	; 0x2c2 <generate_simon_pattern>
 364:	08 95       	ret

00000366 <wait_until_ready_to_play>:
}

//initial / restart 'screen'
//press button 1 to escape it to play the game
void wait_until_ready_to_play()
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
	int waiting = 1;
 36a:	c1 e0       	ldi	r28, 0x01	; 1
 36c:	d0 e0       	ldi	r29, 0x00	; 0
	while (waiting)
 36e:	15 c0       	rjmp	.+42     	; 0x39a <wait_until_ready_to_play+0x34>
	{
		half_second_delay();
 370:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <half_second_delay>
		half_second_delay();
 374:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <half_second_delay>
		if (!(PINA & (1 << PINA0)))
 378:	00 99       	sbic	0x00, 0	; 0
 37a:	0b c0       	rjmp	.+22     	; 0x392 <wait_until_ready_to_play+0x2c>
		{
			waiting = 0;
			//keep light on and play sound while button is held down
			PORTD &= ~(1<<PORTD0);
 37c:	8b b1       	in	r24, 0x0b	; 11
 37e:	8e 7f       	andi	r24, 0xFE	; 254
 380:	8b b9       	out	0x0b, r24	; 11
			play_speaker(1);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINA & (1 << PINA0))); //wait until unclicked
 38a:	00 9b       	sbis	0x00, 0	; 0
 38c:	fe cf       	rjmp	.-4      	; 0x38a <wait_until_ready_to_play+0x24>
	{
		half_second_delay();
		half_second_delay();
		if (!(PINA & (1 << PINA0)))
		{
			waiting = 0;
 38e:	c0 e0       	ldi	r28, 0x00	; 0
 390:	d0 e0       	ldi	r29, 0x00	; 0
			//keep light on and play sound while button is held down
			PORTD &= ~(1<<PORTD0);
			play_speaker(1);
			while (!(PINA & (1 << PINA0))); //wait until unclicked
		}
		PORTD ^= (1<<PORTD0);
 392:	9b b1       	in	r25, 0x0b	; 11
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	89 27       	eor	r24, r25
 398:	8b b9       	out	0x0b, r24	; 11
//initial / restart 'screen'
//press button 1 to escape it to play the game
void wait_until_ready_to_play()
{
	int waiting = 1;
	while (waiting)
 39a:	20 97       	sbiw	r28, 0x00	; 0
 39c:	49 f7       	brne	.-46     	; 0x370 <wait_until_ready_to_play+0xa>
			play_speaker(1);
			while (!(PINA & (1 << PINA0))); //wait until unclicked
		}
		PORTD ^= (1<<PORTD0);
	}
	PORTD |= (1<<PORTD0);
 39e:	8b b1       	in	r24, 0x0b	; 11
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	8b b9       	out	0x0b, r24	; 11
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <light_simon_led>:
//				Game Playing Functions									//

//choose which led to light up
//used when selecting a button
void light_simon_led(int led_to_light)
{
 3aa:	9c 01       	movw	r18, r24
	//0 means on, 1 means off
	//PORTD |= 0xFF; //turn off portd
	//PORTE |= 0b00110000; //turn off port e
	
	//turn off simon specific leds
	PORTD |= (1<<PORTD7);
 3ac:	9b b1       	in	r25, 0x0b	; 11
 3ae:	90 68       	ori	r25, 0x80	; 128
 3b0:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1<<PORTD6);
 3b2:	9b b1       	in	r25, 0x0b	; 11
 3b4:	90 64       	ori	r25, 0x40	; 64
 3b6:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1<<PORTD4);
 3b8:	9b b1       	in	r25, 0x0b	; 11
 3ba:	90 61       	ori	r25, 0x10	; 16
 3bc:	9b b9       	out	0x0b, r25	; 11
	PORTE |= (1<<PORTE5);
 3be:	9e b1       	in	r25, 0x0e	; 14
 3c0:	90 62       	ori	r25, 0x20	; 32
 3c2:	9e b9       	out	0x0e, r25	; 14
	
	switch(led_to_light)
 3c4:	22 30       	cpi	r18, 0x02	; 2
 3c6:	31 05       	cpc	r19, r1
 3c8:	81 f0       	breq	.+32     	; 0x3ea <light_simon_led+0x40>
 3ca:	24 f4       	brge	.+8      	; 0x3d4 <light_simon_led+0x2a>
 3cc:	21 30       	cpi	r18, 0x01	; 1
 3ce:	31 05       	cpc	r19, r1
 3d0:	41 f0       	breq	.+16     	; 0x3e2 <light_simon_led+0x38>
 3d2:	08 95       	ret
 3d4:	23 30       	cpi	r18, 0x03	; 3
 3d6:	31 05       	cpc	r19, r1
 3d8:	61 f0       	breq	.+24     	; 0x3f2 <light_simon_led+0x48>
 3da:	24 30       	cpi	r18, 0x04	; 4
 3dc:	31 05       	cpc	r19, r1
 3de:	69 f0       	breq	.+26     	; 0x3fa <light_simon_led+0x50>
 3e0:	08 95       	ret
	{
		case 1: //turn on port D bit 7 (9th led)
			PORTE &= ~(1<<PORTE5);
 3e2:	8e b1       	in	r24, 0x0e	; 14
 3e4:	8f 7d       	andi	r24, 0xDF	; 223
 3e6:	8e b9       	out	0x0e, r24	; 14
			break;
 3e8:	08 95       	ret
		case 2: //turn on port D bit 1 (8th led)
			PORTD &= ~(1<<PORTD4);
 3ea:	8b b1       	in	r24, 0x0b	; 11
 3ec:	8f 7e       	andi	r24, 0xEF	; 239
 3ee:	8b b9       	out	0x0b, r24	; 11
			break;
 3f0:	08 95       	ret
		case 3: //turn on port D bit 4 (6th led)
			PORTD &= ~(1<<PORTD6);
 3f2:	8b b1       	in	r24, 0x0b	; 11
 3f4:	8f 7b       	andi	r24, 0xBF	; 191
 3f6:	8b b9       	out	0x0b, r24	; 11
			break;
 3f8:	08 95       	ret
		case 4: //turn on port E bit 5 (4th led)
			PORTD &= ~(1<<PORTD7);
 3fa:	8b b1       	in	r24, 0x0b	; 11
 3fc:	8f 77       	andi	r24, 0x7F	; 127
 3fe:	8b b9       	out	0x0b, r24	; 11
 400:	08 95       	ret

00000402 <display_level_leds>:

//display the current level on D1-D4 as 3 bit value
void display_level_leds()
{
	//turn off leds 1-3
	PORTD |= (1<<PORTD0);
 402:	8b b1       	in	r24, 0x0b	; 11
 404:	81 60       	ori	r24, 0x01	; 1
 406:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PORTD1);
 408:	8b b1       	in	r24, 0x0b	; 11
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PORTD2);
 40e:	8b b1       	in	r24, 0x0b	; 11
 410:	84 60       	ori	r24, 0x04	; 4
 412:	8b b9       	out	0x0b, r24	; 11
	
	//this logic only works if there is up to 8 levels, and there isn't a level 0
	//as there is only 3 leds to display the level
	if (LVL==0 || LVL > MAX_LEVEL)	return;
 414:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LVL>
 418:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LVL+0x1>
 41c:	00 97       	sbiw	r24, 0x00	; 0
 41e:	39 f0       	breq	.+14     	; 0x42e <display_level_leds+0x2c>
 420:	89 30       	cpi	r24, 0x09	; 9
 422:	91 05       	cpc	r25, r1
 424:	24 f4       	brge	.+8      	; 0x42e <display_level_leds+0x2c>
	//display current levels on leds
	PORTD &= ~(LVL); //(used first 4 leds (LED1-4))
 426:	9b b1       	in	r25, 0x0b	; 11
 428:	80 95       	com	r24
 42a:	89 23       	and	r24, r25
 42c:	8b b9       	out	0x0b, r24	; 11
 42e:	08 95       	ret

00000430 <play_sequence>:
}

//plays the sequence of leds you need to get right
//sequence of (1, 2, 3, 4) values
void play_sequence()
{
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
	for(int i=0; i<LVL; i++){
 438:	00 e0       	ldi	r16, 0x00	; 0
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	17 c0       	rjmp	.+46     	; 0x46c <play_sequence+0x3c>
		light_simon_led(SEQUENCE[i]);
 43e:	e8 01       	movw	r28, r16
 440:	cc 0f       	add	r28, r28
 442:	dd 1f       	adc	r29, r29
 444:	c6 5f       	subi	r28, 0xF6	; 246
 446:	de 4f       	sbci	r29, 0xFE	; 254
 448:	88 81       	ld	r24, Y
 44a:	99 81       	ldd	r25, Y+1	; 0x01
 44c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <light_simon_led>
		play_speaker(two_to_the_power_of(SEQUENCE[i]));
 450:	88 81       	ld	r24, Y
 452:	99 81       	ldd	r25, Y+1	; 0x01
 454:	0e 94 0a 01 	call	0x214	; 0x214 <two_to_the_power_of>
 458:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
		light_simon_led(0);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 d5 01 	call	0x3aa	; 0x3aa <light_simon_led>
		half_second_delay();
 464:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <half_second_delay>

//plays the sequence of leds you need to get right
//sequence of (1, 2, 3, 4) values
void play_sequence()
{
	for(int i=0; i<LVL; i++){
 468:	0f 5f       	subi	r16, 0xFF	; 255
 46a:	1f 4f       	sbci	r17, 0xFF	; 255
 46c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LVL>
 470:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LVL+0x1>
 474:	08 17       	cp	r16, r24
 476:	19 07       	cpc	r17, r25
 478:	14 f3       	brlt	.-60     	; 0x43e <play_sequence+0xe>
		light_simon_led(SEQUENCE[i]);
		play_speaker(two_to_the_power_of(SEQUENCE[i]));
		light_simon_led(0);
		half_second_delay();
	}
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	08 95       	ret

00000484 <wait_until_button_clicked>:

//wait until a button clicked, then return the value
int wait_until_button_clicked()
{
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
	int button_state = 0;
 488:	c0 e0       	ldi	r28, 0x00	; 0
 48a:	d0 e0       	ldi	r29, 0x00	; 0
	while(button_state==0)
 48c:	54 c0       	rjmp	.+168    	; 0x536 <wait_until_button_clicked+0xb2>
		//the led is lit and the buzzer is played, and then waits until the button is released
		//button_states 1, 2, 3, 4 = buttons 5, 6, 8, 9
		//button_state 5 means the time limit was reached
		
		//button 5 pressed
		if (!(PINE & (1 << PINE6)))
 48e:	66 99       	sbic	0x0c, 6	; 12
 490:	0f c0       	rjmp	.+30     	; 0x4b0 <wait_until_button_clicked+0x2c>
		{
			button_state = 1;
			light_simon_led(button_state);
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 d5 01 	call	0x3aa	; 0x3aa <light_simon_led>
			play_speaker(two_to_the_power_of(button_state));
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 0a 01 	call	0x214	; 0x214 <two_to_the_power_of>
 4a2:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINE & (1 << PINE6)));
 4a6:	66 9b       	sbis	0x0c, 6	; 12
 4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <wait_until_button_clicked+0x22>
		//button_state 5 means the time limit was reached
		
		//button 5 pressed
		if (!(PINE & (1 << PINE6)))
		{
			button_state = 1;
 4aa:	c1 e0       	ldi	r28, 0x01	; 1
 4ac:	d0 e0       	ldi	r29, 0x00	; 0
 4ae:	3f c0       	rjmp	.+126    	; 0x52e <wait_until_button_clicked+0xaa>
			light_simon_led(button_state);
			play_speaker(two_to_the_power_of(button_state));
			while (!(PINE & (1 << PINE6)));
		}
		//button 6 pressed
		else if (!(PINA & (1 << PINA4)))
 4b0:	04 99       	sbic	0x00, 4	; 0
 4b2:	0f c0       	rjmp	.+30     	; 0x4d2 <wait_until_button_clicked+0x4e>
		{
			button_state = 2;
			light_simon_led(button_state);
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <light_simon_led>
			play_speaker(two_to_the_power_of(button_state));
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 0a 01 	call	0x214	; 0x214 <two_to_the_power_of>
 4c4:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINA & (1 << PINA4)));
 4c8:	04 9b       	sbis	0x00, 4	; 0
 4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <wait_until_button_clicked+0x44>
			while (!(PINE & (1 << PINE6)));
		}
		//button 6 pressed
		else if (!(PINA & (1 << PINA4)))
		{
			button_state = 2;
 4cc:	c2 e0       	ldi	r28, 0x02	; 2
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
 4d0:	2e c0       	rjmp	.+92     	; 0x52e <wait_until_button_clicked+0xaa>
			light_simon_led(button_state);
			play_speaker(two_to_the_power_of(button_state));
			while (!(PINA & (1 << PINA4)));
		}
		//button 8 pressed
		else if (!(PINA & (1 << PINA6)))
 4d2:	06 99       	sbic	0x00, 6	; 0
 4d4:	0f c0       	rjmp	.+30     	; 0x4f4 <wait_until_button_clicked+0x70>
		{
			button_state = 3;
			light_simon_led(button_state);
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 d5 01 	call	0x3aa	; 0x3aa <light_simon_led>
			play_speaker(two_to_the_power_of(button_state));
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 0a 01 	call	0x214	; 0x214 <two_to_the_power_of>
 4e6:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINA & (1 << PINA6)));
 4ea:	06 9b       	sbis	0x00, 6	; 0
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <wait_until_button_clicked+0x66>
			while (!(PINA & (1 << PINA4)));
		}
		//button 8 pressed
		else if (!(PINA & (1 << PINA6)))
		{
			button_state = 3;
 4ee:	c3 e0       	ldi	r28, 0x03	; 3
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
 4f2:	1d c0       	rjmp	.+58     	; 0x52e <wait_until_button_clicked+0xaa>
			light_simon_led(button_state);
			play_speaker(two_to_the_power_of(button_state));
			while (!(PINA & (1 << PINA6)));
		}
		//button 9 pressed
		else if (!(PINA & (1 << PINA7)))
 4f4:	07 99       	sbic	0x00, 7	; 0
 4f6:	0f c0       	rjmp	.+30     	; 0x516 <wait_until_button_clicked+0x92>
		{
			button_state = 4;
			light_simon_led(button_state);
 4f8:	84 e0       	ldi	r24, 0x04	; 4
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <light_simon_led>
			play_speaker(two_to_the_power_of(button_state));
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 0a 01 	call	0x214	; 0x214 <two_to_the_power_of>
 508:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINA & (1 << PINA7)));
 50c:	07 9b       	sbis	0x00, 7	; 0
 50e:	fe cf       	rjmp	.-4      	; 0x50c <wait_until_button_clicked+0x88>
			while (!(PINA & (1 << PINA6)));
		}
		//button 9 pressed
		else if (!(PINA & (1 << PINA7)))
		{
			button_state = 4;
 510:	c4 e0       	ldi	r28, 0x04	; 4
 512:	d0 e0       	ldi	r29, 0x00	; 0
 514:	0c c0       	rjmp	.+24     	; 0x52e <wait_until_button_clicked+0xaa>
			light_simon_led(button_state);
			play_speaker(two_to_the_power_of(button_state));
			while (!(PINA & (1 << PINA7)));
		}
		else if((timed_out))
 516:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 51a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 51e:	89 2b       	or	r24, r25
 520:	31 f0       	breq	.+12     	; 0x52e <wait_until_button_clicked+0xaa>
		{
			button_state = 5; //5 will always be invalid
			timed_out = 0; //reset timed_out variable
 522:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 526:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
			play_speaker(two_to_the_power_of(button_state));
			while (!(PINA & (1 << PINA7)));
		}
		else if((timed_out))
		{
			button_state = 5; //5 will always be invalid
 52a:	c5 e0       	ldi	r28, 0x05	; 5
 52c:	d0 e0       	ldi	r29, 0x00	; 0
			timed_out = 0; //reset timed_out variable
		}
		light_simon_led(0); //turn off all led lights
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 d5 01 	call	0x3aa	; 0x3aa <light_simon_led>

//wait until a button clicked, then return the value
int wait_until_button_clicked()
{
	int button_state = 0;
	while(button_state==0)
 536:	20 97       	sbiw	r28, 0x00	; 0
 538:	09 f4       	brne	.+2      	; 0x53c <wait_until_button_clicked+0xb8>
 53a:	a9 cf       	rjmp	.-174    	; 0x48e <wait_until_button_clicked+0xa>
			timed_out = 0; //reset timed_out variable
		}
		light_simon_led(0); //turn off all led lights
	}
	return button_state;
}
 53c:	ce 01       	movw	r24, r28
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	08 95       	ret

00000544 <play_game>:

void play_game()
{
 544:	0f 93       	push	r16
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
	int button_state = 0;
	
	generate_simon_pattern();
 54c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <generate_simon_pattern>
	LVL = 1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <LVL+0x1>
 558:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LVL>
	
	int playing = 1;
 55c:	01 e0       	ldi	r16, 0x01	; 1
 55e:	10 e0       	ldi	r17, 0x00	; 0
	while(playing)
 560:	3c c0       	rjmp	.+120    	; 0x5da <play_game+0x96>
	{
		if(LVL > MAX_LEVEL)
 562:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LVL>
 566:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LVL+0x1>
 56a:	09 97       	sbiw	r24, 0x09	; 9
 56c:	2c f0       	brlt	.+10     	; 0x578 <play_game+0x34>
		{
			playing = 0;
			win_game();
 56e:	0e 94 9f 01 	call	0x33e	; 0x33e <win_game>
	int playing = 1;
	while(playing)
	{
		if(LVL > MAX_LEVEL)
		{
			playing = 0;
 572:	00 e0       	ldi	r16, 0x00	; 0
 574:	10 e0       	ldi	r17, 0x00	; 0
 576:	31 c0       	rjmp	.+98     	; 0x5da <play_game+0x96>
			win_game();
		}
		else
		{
			display_level_leds();
 578:	0e 94 01 02 	call	0x402	; 0x402 <display_level_leds>
			play_sequence();
 57c:	0e 94 18 02 	call	0x430	; 0x430 <play_sequence>
			int buttons_pressed = 0;
			start_minute_time_limit(); //minute time delay starts each level
 580:	0e 94 a5 00 	call	0x14a	; 0x14a <start_minute_time_limit>
		}
		else
		{
			display_level_leds();
			play_sequence();
			int buttons_pressed = 0;
 584:	c0 e0       	ldi	r28, 0x00	; 0
 586:	d0 e0       	ldi	r29, 0x00	; 0
			start_minute_time_limit(); //minute time delay starts each level
			while((buttons_pressed < LVL) && playing)
 588:	12 c0       	rjmp	.+36     	; 0x5ae <play_game+0x6a>
			{
				int button_clicked = wait_until_button_clicked();
 58a:	0e 94 42 02 	call	0x484	; 0x484 <wait_until_button_clicked>
				if (button_clicked == SEQUENCE[buttons_pressed]) buttons_pressed++;
 58e:	fe 01       	movw	r30, r28
 590:	ee 0f       	add	r30, r30
 592:	ff 1f       	adc	r31, r31
 594:	e6 5f       	subi	r30, 0xF6	; 246
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	20 81       	ld	r18, Z
 59a:	31 81       	ldd	r19, Z+1	; 0x01
 59c:	82 17       	cp	r24, r18
 59e:	93 07       	cpc	r25, r19
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <play_game+0x62>
 5a2:	21 96       	adiw	r28, 0x01	; 1
 5a4:	04 c0       	rjmp	.+8      	; 0x5ae <play_game+0x6a>
				else
				{
					lose_game();
 5a6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lose_game>
					playing = 0;
 5aa:	00 e0       	ldi	r16, 0x00	; 0
 5ac:	10 e0       	ldi	r17, 0x00	; 0
		{
			display_level_leds();
			play_sequence();
			int buttons_pressed = 0;
			start_minute_time_limit(); //minute time delay starts each level
			while((buttons_pressed < LVL) && playing)
 5ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LVL>
 5b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LVL+0x1>
 5b6:	c8 17       	cp	r28, r24
 5b8:	d9 07       	cpc	r29, r25
 5ba:	1c f4       	brge	.+6      	; 0x5c2 <play_game+0x7e>
 5bc:	01 15       	cp	r16, r1
 5be:	11 05       	cpc	r17, r1
 5c0:	21 f7       	brne	.-56     	; 0x58a <play_game+0x46>
				{
					lose_game();
					playing = 0;
				}
			}
			if (playing) LVL++;
 5c2:	01 15       	cp	r16, r1
 5c4:	11 05       	cpc	r17, r1
 5c6:	29 f0       	breq	.+10     	; 0x5d2 <play_game+0x8e>
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <LVL+0x1>
 5ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LVL>
			
			//wait a second until moving to the next level
			//that way the lights and sounds don't overlay
			half_second_delay();
 5d2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <half_second_delay>
			half_second_delay();
 5d6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <half_second_delay>
	
	generate_simon_pattern();
	LVL = 1;
	
	int playing = 1;
	while(playing)
 5da:	01 15       	cp	r16, r1
 5dc:	11 05       	cpc	r17, r1
 5de:	09 f6       	brne	.-126    	; 0x562 <play_game+0x1e>
			//that way the lights and sounds don't overlay
			half_second_delay();
			half_second_delay();
		}
	}
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	08 95       	ret

000005ea <main>:
//				Game Playing Functions									//
//////////////////////////////////////////////////////////////////////////

int main(void)
{
	initialize_ports();
 5ea:	0e 94 98 00 	call	0x130	; 0x130 <initialize_ports>
	srand(time(NULL));
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 85 00 	call	0x10a	; 0x10a <time>
 5f6:	cb 01       	movw	r24, r22
 5f8:	0e 94 80 03 	call	0x700	; 0x700 <srand>
	while(1)
	{
		//display blinking red led
		wait_until_ready_to_play();
 5fc:	0e 94 b3 01 	call	0x366	; 0x366 <wait_until_ready_to_play>
		//wait a second after button pressed
		half_second_delay();
 600:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <half_second_delay>
		half_second_delay();
 604:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <half_second_delay>
		//play game
		play_game();
 608:	0e 94 a2 02 	call	0x544	; 0x544 <play_game>
 60c:	f7 cf       	rjmp	.-18     	; 0x5fc <main+0x12>

0000060e <__divmodhi4>:
 60e:	97 fb       	bst	r25, 7
 610:	07 2e       	mov	r0, r23
 612:	16 f4       	brtc	.+4      	; 0x618 <__divmodhi4+0xa>
 614:	00 94       	com	r0
 616:	07 d0       	rcall	.+14     	; 0x626 <__divmodhi4_neg1>
 618:	77 fd       	sbrc	r23, 7
 61a:	09 d0       	rcall	.+18     	; 0x62e <__divmodhi4_neg2>
 61c:	0e 94 1b 03 	call	0x636	; 0x636 <__udivmodhi4>
 620:	07 fc       	sbrc	r0, 7
 622:	05 d0       	rcall	.+10     	; 0x62e <__divmodhi4_neg2>
 624:	3e f4       	brtc	.+14     	; 0x634 <__divmodhi4_exit>

00000626 <__divmodhi4_neg1>:
 626:	90 95       	com	r25
 628:	81 95       	neg	r24
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	08 95       	ret

0000062e <__divmodhi4_neg2>:
 62e:	70 95       	com	r23
 630:	61 95       	neg	r22
 632:	7f 4f       	sbci	r23, 0xFF	; 255

00000634 <__divmodhi4_exit>:
 634:	08 95       	ret

00000636 <__udivmodhi4>:
 636:	aa 1b       	sub	r26, r26
 638:	bb 1b       	sub	r27, r27
 63a:	51 e1       	ldi	r21, 0x11	; 17
 63c:	07 c0       	rjmp	.+14     	; 0x64c <__udivmodhi4_ep>

0000063e <__udivmodhi4_loop>:
 63e:	aa 1f       	adc	r26, r26
 640:	bb 1f       	adc	r27, r27
 642:	a6 17       	cp	r26, r22
 644:	b7 07       	cpc	r27, r23
 646:	10 f0       	brcs	.+4      	; 0x64c <__udivmodhi4_ep>
 648:	a6 1b       	sub	r26, r22
 64a:	b7 0b       	sbc	r27, r23

0000064c <__udivmodhi4_ep>:
 64c:	88 1f       	adc	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	5a 95       	dec	r21
 652:	a9 f7       	brne	.-22     	; 0x63e <__udivmodhi4_loop>
 654:	80 95       	com	r24
 656:	90 95       	com	r25
 658:	bc 01       	movw	r22, r24
 65a:	cd 01       	movw	r24, r26
 65c:	08 95       	ret

0000065e <do_rand>:
 65e:	8f 92       	push	r8
 660:	9f 92       	push	r9
 662:	af 92       	push	r10
 664:	bf 92       	push	r11
 666:	cf 92       	push	r12
 668:	df 92       	push	r13
 66a:	ef 92       	push	r14
 66c:	ff 92       	push	r15
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	ec 01       	movw	r28, r24
 674:	68 81       	ld	r22, Y
 676:	79 81       	ldd	r23, Y+1	; 0x01
 678:	8a 81       	ldd	r24, Y+2	; 0x02
 67a:	9b 81       	ldd	r25, Y+3	; 0x03
 67c:	61 15       	cp	r22, r1
 67e:	71 05       	cpc	r23, r1
 680:	81 05       	cpc	r24, r1
 682:	91 05       	cpc	r25, r1
 684:	21 f4       	brne	.+8      	; 0x68e <do_rand+0x30>
 686:	64 e2       	ldi	r22, 0x24	; 36
 688:	79 ed       	ldi	r23, 0xD9	; 217
 68a:	8b e5       	ldi	r24, 0x5B	; 91
 68c:	97 e0       	ldi	r25, 0x07	; 7
 68e:	2d e1       	ldi	r18, 0x1D	; 29
 690:	33 ef       	ldi	r19, 0xF3	; 243
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	0e 94 8b 03 	call	0x716	; 0x716 <__divmodsi4>
 69a:	49 01       	movw	r8, r18
 69c:	5a 01       	movw	r10, r20
 69e:	9b 01       	movw	r18, r22
 6a0:	ac 01       	movw	r20, r24
 6a2:	a7 ea       	ldi	r26, 0xA7	; 167
 6a4:	b1 e4       	ldi	r27, 0x41	; 65
 6a6:	0e 94 aa 03 	call	0x754	; 0x754 <__muluhisi3>
 6aa:	6b 01       	movw	r12, r22
 6ac:	7c 01       	movw	r14, r24
 6ae:	ac ee       	ldi	r26, 0xEC	; 236
 6b0:	b4 ef       	ldi	r27, 0xF4	; 244
 6b2:	a5 01       	movw	r20, r10
 6b4:	94 01       	movw	r18, r8
 6b6:	0e 94 b8 03 	call	0x770	; 0x770 <__mulohisi3>
 6ba:	dc 01       	movw	r26, r24
 6bc:	cb 01       	movw	r24, r22
 6be:	8c 0d       	add	r24, r12
 6c0:	9d 1d       	adc	r25, r13
 6c2:	ae 1d       	adc	r26, r14
 6c4:	bf 1d       	adc	r27, r15
 6c6:	b7 ff       	sbrs	r27, 7
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <do_rand+0x72>
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	a1 09       	sbc	r26, r1
 6ce:	b0 48       	sbci	r27, 0x80	; 128
 6d0:	88 83       	st	Y, r24
 6d2:	99 83       	std	Y+1, r25	; 0x01
 6d4:	aa 83       	std	Y+2, r26	; 0x02
 6d6:	bb 83       	std	Y+3, r27	; 0x03
 6d8:	9f 77       	andi	r25, 0x7F	; 127
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	ff 90       	pop	r15
 6e0:	ef 90       	pop	r14
 6e2:	df 90       	pop	r13
 6e4:	cf 90       	pop	r12
 6e6:	bf 90       	pop	r11
 6e8:	af 90       	pop	r10
 6ea:	9f 90       	pop	r9
 6ec:	8f 90       	pop	r8
 6ee:	08 95       	ret

000006f0 <rand_r>:
 6f0:	0e 94 2f 03 	call	0x65e	; 0x65e <do_rand>
 6f4:	08 95       	ret

000006f6 <rand>:
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	0e 94 2f 03 	call	0x65e	; 0x65e <do_rand>
 6fe:	08 95       	ret

00000700 <srand>:
 700:	a0 e0       	ldi	r26, 0x00	; 0
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 708:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 70c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 710:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 714:	08 95       	ret

00000716 <__divmodsi4>:
 716:	05 2e       	mov	r0, r21
 718:	97 fb       	bst	r25, 7
 71a:	1e f4       	brtc	.+6      	; 0x722 <__divmodsi4+0xc>
 71c:	00 94       	com	r0
 71e:	0e 94 a2 03 	call	0x744	; 0x744 <__negsi2>
 722:	57 fd       	sbrc	r21, 7
 724:	07 d0       	rcall	.+14     	; 0x734 <__divmodsi4_neg2>
 726:	0e 94 bd 03 	call	0x77a	; 0x77a <__udivmodsi4>
 72a:	07 fc       	sbrc	r0, 7
 72c:	03 d0       	rcall	.+6      	; 0x734 <__divmodsi4_neg2>
 72e:	4e f4       	brtc	.+18     	; 0x742 <__divmodsi4_exit>
 730:	0c 94 a2 03 	jmp	0x744	; 0x744 <__negsi2>

00000734 <__divmodsi4_neg2>:
 734:	50 95       	com	r21
 736:	40 95       	com	r20
 738:	30 95       	com	r19
 73a:	21 95       	neg	r18
 73c:	3f 4f       	sbci	r19, 0xFF	; 255
 73e:	4f 4f       	sbci	r20, 0xFF	; 255
 740:	5f 4f       	sbci	r21, 0xFF	; 255

00000742 <__divmodsi4_exit>:
 742:	08 95       	ret

00000744 <__negsi2>:
 744:	90 95       	com	r25
 746:	80 95       	com	r24
 748:	70 95       	com	r23
 74a:	61 95       	neg	r22
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	8f 4f       	sbci	r24, 0xFF	; 255
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	08 95       	ret

00000754 <__muluhisi3>:
 754:	0e 94 df 03 	call	0x7be	; 0x7be <__umulhisi3>
 758:	a5 9f       	mul	r26, r21
 75a:	90 0d       	add	r25, r0
 75c:	b4 9f       	mul	r27, r20
 75e:	90 0d       	add	r25, r0
 760:	a4 9f       	mul	r26, r20
 762:	80 0d       	add	r24, r0
 764:	91 1d       	adc	r25, r1
 766:	11 24       	eor	r1, r1
 768:	08 95       	ret

0000076a <__mulshisi3>:
 76a:	b7 ff       	sbrs	r27, 7
 76c:	0c 94 aa 03 	jmp	0x754	; 0x754 <__muluhisi3>

00000770 <__mulohisi3>:
 770:	0e 94 aa 03 	call	0x754	; 0x754 <__muluhisi3>
 774:	82 1b       	sub	r24, r18
 776:	93 0b       	sbc	r25, r19
 778:	08 95       	ret

0000077a <__udivmodsi4>:
 77a:	a1 e2       	ldi	r26, 0x21	; 33
 77c:	1a 2e       	mov	r1, r26
 77e:	aa 1b       	sub	r26, r26
 780:	bb 1b       	sub	r27, r27
 782:	fd 01       	movw	r30, r26
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <__udivmodsi4_ep>

00000786 <__udivmodsi4_loop>:
 786:	aa 1f       	adc	r26, r26
 788:	bb 1f       	adc	r27, r27
 78a:	ee 1f       	adc	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	a2 17       	cp	r26, r18
 790:	b3 07       	cpc	r27, r19
 792:	e4 07       	cpc	r30, r20
 794:	f5 07       	cpc	r31, r21
 796:	20 f0       	brcs	.+8      	; 0x7a0 <__udivmodsi4_ep>
 798:	a2 1b       	sub	r26, r18
 79a:	b3 0b       	sbc	r27, r19
 79c:	e4 0b       	sbc	r30, r20
 79e:	f5 0b       	sbc	r31, r21

000007a0 <__udivmodsi4_ep>:
 7a0:	66 1f       	adc	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	1a 94       	dec	r1
 7aa:	69 f7       	brne	.-38     	; 0x786 <__udivmodsi4_loop>
 7ac:	60 95       	com	r22
 7ae:	70 95       	com	r23
 7b0:	80 95       	com	r24
 7b2:	90 95       	com	r25
 7b4:	9b 01       	movw	r18, r22
 7b6:	ac 01       	movw	r20, r24
 7b8:	bd 01       	movw	r22, r26
 7ba:	cf 01       	movw	r24, r30
 7bc:	08 95       	ret

000007be <__umulhisi3>:
 7be:	a2 9f       	mul	r26, r18
 7c0:	b0 01       	movw	r22, r0
 7c2:	b3 9f       	mul	r27, r19
 7c4:	c0 01       	movw	r24, r0
 7c6:	a3 9f       	mul	r26, r19
 7c8:	70 0d       	add	r23, r0
 7ca:	81 1d       	adc	r24, r1
 7cc:	11 24       	eor	r1, r1
 7ce:	91 1d       	adc	r25, r1
 7d0:	b2 9f       	mul	r27, r18
 7d2:	70 0d       	add	r23, r0
 7d4:	81 1d       	adc	r24, r1
 7d6:	11 24       	eor	r1, r1
 7d8:	91 1d       	adc	r25, r1
 7da:	08 95       	ret

000007dc <_exit>:
 7dc:	f8 94       	cli

000007de <__stop_program>:
 7de:	ff cf       	rjmp	.-2      	; 0x7de <__stop_program>
