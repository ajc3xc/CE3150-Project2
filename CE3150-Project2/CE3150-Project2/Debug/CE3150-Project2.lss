
CE3150-Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000724  000007b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000724  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800106  00800106  000007be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fbb  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4c  00000000  00000000  0000187b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b3  00000000  00000000  000023c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000626  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000414  00000000  00000000  000032f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003706  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e4 e2       	ldi	r30, 0x24	; 36
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a6 30       	cpi	r26, 0x06	; 6
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a6 e0       	ldi	r26, 0x06	; 6
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	aa 31       	cpi	r26, 0x1A	; 26
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 97 02 	call	0x52e	; 0x52e <main>
 102:	0c 94 90 03 	jmp	0x720	; 0x720 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <time>:
 10a:	fc 01       	movw	r30, r24
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <__system_time>
 114:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <__system_time+0x1>
 118:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__system_time+0x2>
 11c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__system_time+0x3>
 120:	0f be       	out	0x3f, r0	; 63
 122:	30 97       	sbiw	r30, 0x00	; 0
 124:	21 f0       	breq	.+8      	; 0x12e <time+0x24>
 126:	60 83       	st	Z, r22
 128:	71 83       	std	Z+1, r23	; 0x01
 12a:	82 83       	std	Z+2, r24	; 0x02
 12c:	93 83       	std	Z+3, r25	; 0x03
 12e:	08 95       	ret

00000130 <generate_simon_pattern>:


int SEQUENCE[MAX_LEVEL];
int LVL = 1;

void generate_simon_pattern(){
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
	//since this can be called multiple times, srand shouldn't be here (it regenerates the same pattern)
	//it should be in main
	//srand(time(NULL));
	for(int i=0 ; i<MAX_LEVEL ; i++){
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	13 c0       	rjmp	.+38     	; 0x160 <generate_simon_pattern+0x30>
		SEQUENCE[i] = (rand() % 4) + 1; //generate a random number from 1-4 inclusive
 13a:	0e 94 1d 03 	call	0x63a	; 0x63a <rand>
 13e:	83 70       	andi	r24, 0x03	; 3
 140:	90 78       	andi	r25, 0x80	; 128
 142:	99 23       	and	r25, r25
 144:	24 f4       	brge	.+8      	; 0x14e <generate_simon_pattern+0x1e>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	8c 6f       	ori	r24, 0xFC	; 252
 14a:	9f 6f       	ori	r25, 0xFF	; 255
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	fe 01       	movw	r30, r28
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	ea 5f       	subi	r30, 0xFA	; 250
 158:	fe 4f       	sbci	r31, 0xFE	; 254
 15a:	91 83       	std	Z+1, r25	; 0x01
 15c:	80 83       	st	Z, r24

void generate_simon_pattern(){
	//since this can be called multiple times, srand shouldn't be here (it regenerates the same pattern)
	//it should be in main
	//srand(time(NULL));
	for(int i=0 ; i<MAX_LEVEL ; i++){
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	c8 30       	cpi	r28, 0x08	; 8
 162:	d1 05       	cpc	r29, r1
 164:	54 f3       	brlt	.-44     	; 0x13a <generate_simon_pattern+0xa>
		SEQUENCE[i] = (rand() % 4) + 1; //generate a random number from 1-4 inclusive
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <initialize_ports>:

void initialize_ports()
{
	DDRA = 0x00; //PINA input
 16c:	11 b8       	out	0x01, r1	; 1
	DDRD = 0xFF; //DDRD input
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0b00110000; //outputs PINE bits 5, 4, inputs bit 6
 172:	90 e3       	ldi	r25, 0x30	; 48
 174:	9d b9       	out	0x0d, r25	; 13
	
	//0 means on, 1 means off
	PORTA |= 0xFF;
 176:	92 b1       	in	r25, 0x02	; 2
 178:	82 b9       	out	0x02, r24	; 2
	PORTD |= 0xFF; //turn off portd
 17a:	9b b1       	in	r25, 0x0b	; 11
 17c:	8b b9       	out	0x0b, r24	; 11
	PORTE |= 0b00110000; //turn off port e
 17e:	8e b1       	in	r24, 0x0e	; 14
 180:	80 63       	ori	r24, 0x30	; 48
 182:	8e b9       	out	0x0e, r24	; 14
 184:	08 95       	ret

00000186 <light_simon_led>:
}

//choose which led to light up
//used when selecting a button
void light_simon_led(int led_to_light)
{
 186:	9c 01       	movw	r18, r24
	//0 means on, 1 means off
	//PORTD |= 0xFF; //turn off portd
	//PORTE |= 0b00110000; //turn off port e
	
	//turn off simon specific leds
	PORTD |= (1<<PORTD7);
 188:	9b b1       	in	r25, 0x0b	; 11
 18a:	90 68       	ori	r25, 0x80	; 128
 18c:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1<<PORTD6);
 18e:	9b b1       	in	r25, 0x0b	; 11
 190:	90 64       	ori	r25, 0x40	; 64
 192:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1<<PORTD4);
 194:	9b b1       	in	r25, 0x0b	; 11
 196:	90 61       	ori	r25, 0x10	; 16
 198:	9b b9       	out	0x0b, r25	; 11
	PORTE |= (1<<PORTE5);
 19a:	9e b1       	in	r25, 0x0e	; 14
 19c:	90 62       	ori	r25, 0x20	; 32
 19e:	9e b9       	out	0x0e, r25	; 14
	
	switch(led_to_light)
 1a0:	22 30       	cpi	r18, 0x02	; 2
 1a2:	31 05       	cpc	r19, r1
 1a4:	81 f0       	breq	.+32     	; 0x1c6 <light_simon_led+0x40>
 1a6:	24 f4       	brge	.+8      	; 0x1b0 <light_simon_led+0x2a>
 1a8:	21 30       	cpi	r18, 0x01	; 1
 1aa:	31 05       	cpc	r19, r1
 1ac:	41 f0       	breq	.+16     	; 0x1be <light_simon_led+0x38>
 1ae:	08 95       	ret
 1b0:	23 30       	cpi	r18, 0x03	; 3
 1b2:	31 05       	cpc	r19, r1
 1b4:	61 f0       	breq	.+24     	; 0x1ce <light_simon_led+0x48>
 1b6:	24 30       	cpi	r18, 0x04	; 4
 1b8:	31 05       	cpc	r19, r1
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <light_simon_led+0x50>
 1bc:	08 95       	ret
	{
		case 1: //turn on port D bit 7 (9th led)
			PORTE &= ~(1<<PORTE5);
 1be:	8e b1       	in	r24, 0x0e	; 14
 1c0:	8f 7d       	andi	r24, 0xDF	; 223
 1c2:	8e b9       	out	0x0e, r24	; 14
			break;
 1c4:	08 95       	ret
		case 2: //turn on port D bit 1 (8th led)
			PORTD &= ~(1<<PORTD4);
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	8f 7e       	andi	r24, 0xEF	; 239
 1ca:	8b b9       	out	0x0b, r24	; 11
			break;
 1cc:	08 95       	ret
		case 3: //turn on port D bit 4 (6th led)
			PORTD &= ~(1<<PORTD6);
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	8f 7b       	andi	r24, 0xBF	; 191
 1d2:	8b b9       	out	0x0b, r24	; 11
			break;
 1d4:	08 95       	ret
		case 4: //turn on port E bit 5 (4th led)
			PORTD &= ~(1<<PORTD7);
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8f 77       	andi	r24, 0x7F	; 127
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	08 95       	ret

000001de <display_level_leds>:

//display the current level on D1-D3 as 3 bit value
void display_level_leds()
{
	//turn off leds 1-3
	PORTD |= (1<<PORTD0);
 1de:	8b b1       	in	r24, 0x0b	; 11
 1e0:	81 60       	ori	r24, 0x01	; 1
 1e2:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PORTD1);
 1e4:	8b b1       	in	r24, 0x0b	; 11
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PORTD2);
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	84 60       	ori	r24, 0x04	; 4
 1ee:	8b b9       	out	0x0b, r24	; 11
	
	//this logic only works if there is up to 8 levels, and there isn't a level 0
	//as there is only 3 leds to display the level
	if (LVL==0 || LVL > MAX_LEVEL)	return;
 1f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LVL>
 1f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LVL+0x1>
 1f8:	00 97       	sbiw	r24, 0x00	; 0
 1fa:	39 f0       	breq	.+14     	; 0x20a <display_level_leds+0x2c>
 1fc:	89 30       	cpi	r24, 0x09	; 9
 1fe:	91 05       	cpc	r25, r1
 200:	24 f4       	brge	.+8      	; 0x20a <display_level_leds+0x2c>
	//display current levels on leds
	PORTD &= ~(LVL); //(used first 4 leds (LED1-4))
 202:	9b b1       	in	r25, 0x0b	; 11
 204:	80 95       	com	r24
 206:	89 23       	and	r24, r25
 208:	8b b9       	out	0x0b, r24	; 11
 20a:	08 95       	ret

0000020c <half_second_delay>:
#define HALF_SECOND_ITERATIONS 15
//generates a half second delay on timer 0
// (255 * 1024 * 15) / (8 * 10^6) = .4896 seconds
void half_second_delay()
{
	TCNT0 = HALF_SECOND_TIMER_VAL;
 20c:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00;
 20e:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= 0x05; // normal clock, prescaler 1024
 210:	85 b5       	in	r24, 0x25	; 37
 212:	85 60       	ori	r24, 0x05	; 5
 214:	85 bd       	out	0x25, r24	; 37
	
	int counter = 0;
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
	while(counter < HALF_SECOND_ITERATIONS)
 21a:	06 c0       	rjmp	.+12     	; 0x228 <half_second_delay+0x1c>
	{
		//poll until timer overflows
		while (!(TIFR0 & (1<<TOV0)));
 21c:	a8 9b       	sbis	0x15, 0	; 21
 21e:	fe cf       	rjmp	.-4      	; 0x21c <half_second_delay+0x10>
		TCNT0 = HALF_SECOND_TIMER_VAL; //reset tcnt0
 220:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 1<<TOV0; //need to reset the overflow flag bit
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	25 bb       	out	0x15, r18	; 21
		counter++;
 226:	01 96       	adiw	r24, 0x01	; 1
	TCNT0 = HALF_SECOND_TIMER_VAL;
	TCCR0A = 0x00;
	TCCR0B |= 0x05; // normal clock, prescaler 1024
	
	int counter = 0;
	while(counter < HALF_SECOND_ITERATIONS)
 228:	8f 30       	cpi	r24, 0x0F	; 15
 22a:	91 05       	cpc	r25, r1
 22c:	bc f3       	brlt	.-18     	; 0x21c <half_second_delay+0x10>
		TIFR0 = 1<<TOV0; //need to reset the overflow flag bit
		counter++;
	}
	
	//turn off timer0
	TCCR0A = 0x00;
 22e:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 230:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 1<<TOV0;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	85 bb       	out	0x15, r24	; 21
 236:	08 95       	ret

00000238 <turn_off_leds>:
}

//turn off all the lights
void turn_off_leds()
{
	PORTD = 0xFF;
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	8b b9       	out	0x0b, r24	; 11
	PORTE |= (1<<PORTE5);
 23c:	8e b1       	in	r24, 0x0e	; 14
 23e:	80 62       	ori	r24, 0x20	; 32
 240:	8e b9       	out	0x0e, r24	; 14
 242:	08 95       	ret

00000244 <play_speaker>:
}


//plays the speaker for 1 second
void play_speaker(int divisor)
{
 244:	9c 01       	movw	r18, r24
	//divisor must be 2^n
	if (!(divisor && !(divisor & (divisor-1)))) return;
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	a9 f1       	breq	.+106    	; 0x2b4 <play_speaker+0x70>
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	82 23       	and	r24, r18
 24e:	93 23       	and	r25, r19
 250:	89 2b       	or	r24, r25
 252:	81 f5       	brne	.+96     	; 0x2b4 <play_speaker+0x70>
	 
	//const int TIMER_VAL = 256/divisor - 1
	const int TIMER_VAL = (255 - ((256/divisor) - 1));
 254:	e0 e0       	ldi	r30, 0x00	; 0
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	cf 01       	movw	r24, r30
 25a:	b9 01       	movw	r22, r18
 25c:	0e 94 a9 02 	call	0x552	; 0x552 <__divmodhi4>
 260:	e6 1b       	sub	r30, r22
 262:	f7 0b       	sbc	r31, r23
	TCNT2 = TIMER_VAL;
 264:	6e 2f       	mov	r22, r30
 266:	e0 93 b2 00 	sts	0x00B2, r30	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	TCCR2A = 0x00; //normal clock
 26a:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B |= 0x07; // prescaler 1024
 26e:	e1 eb       	ldi	r30, 0xB1	; 177
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	87 60       	ori	r24, 0x07	; 7
 276:	80 83       	st	Z, r24
	
	int counter = 0;
	const int MAX_ITERATIONS = 30 * divisor;
 278:	8e e1       	ldi	r24, 0x1E	; 30
 27a:	82 9f       	mul	r24, r18
 27c:	a0 01       	movw	r20, r0
 27e:	83 9f       	mul	r24, r19
 280:	50 0d       	add	r21, r0
 282:	11 24       	eor	r1, r1
	TCNT2 = TIMER_VAL;
	
	TCCR2A = 0x00; //normal clock
	TCCR2B |= 0x07; // prescaler 1024
	
	int counter = 0;
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
	const int MAX_ITERATIONS = 30 * divisor;
	//total time = 1024 * (255 - (256/divisor - 1)) * 30 * divisor
	while(counter < MAX_ITERATIONS)
 288:	0c c0       	rjmp	.+24     	; 0x2a2 <play_speaker+0x5e>
	{
		//poll until timer overflows
		while (!(TIFR2 & (1<<TOV2)));
 28a:	b8 9b       	sbis	0x17, 0	; 23
 28c:	fe cf       	rjmp	.-4      	; 0x28a <play_speaker+0x46>
		PORTE ^= (1<<PORTE4); //toggle PORTE6
 28e:	9e b1       	in	r25, 0x0e	; 14
 290:	80 e1       	ldi	r24, 0x10	; 16
 292:	89 27       	eor	r24, r25
 294:	8e b9       	out	0x0e, r24	; 14
		//PORTE ^= (1<<PORTE5); //toggle PORTE5
		TCNT2 = TIMER_VAL; //reset tcnt2
 296:	60 93 b2 00 	sts	0x00B2, r22	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
		TIFR2 = 1<<TOV2; //need to reset the overflow flag bit
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	87 bb       	out	0x17, r24	; 23
		counter++;
 29e:	2f 5f       	subi	r18, 0xFF	; 255
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
	TCCR2B |= 0x07; // prescaler 1024
	
	int counter = 0;
	const int MAX_ITERATIONS = 30 * divisor;
	//total time = 1024 * (255 - (256/divisor - 1)) * 30 * divisor
	while(counter < MAX_ITERATIONS)
 2a2:	24 17       	cp	r18, r20
 2a4:	35 07       	cpc	r19, r21
 2a6:	8c f3       	brlt	.-30     	; 0x28a <play_speaker+0x46>
		TIFR2 = 1<<TOV2; //need to reset the overflow flag bit
		counter++;
	}
	
	//turn off timer0
	TCCR2A = 0x00;
 2a8:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0x00;
 2ac:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIFR2 = 1<<TOV2;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	87 bb       	out	0x17, r24	; 23
 2b4:	08 95       	ret

000002b6 <lose_game>:

//call the function if the game was lost
void lose_game()
{
	//turn off LEDs
	turn_off_leds();
 2b6:	0e 94 1c 01 	call	0x238	; 0x238 <turn_off_leds>
	
	//display an x pattern on the LEDs
	PORTD &= ~(1<<PORTD7);
 2ba:	8b b1       	in	r24, 0x0b	; 11
 2bc:	8f 77       	andi	r24, 0x7F	; 127
 2be:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD5);
 2c0:	8b b1       	in	r24, 0x0b	; 11
 2c2:	8f 7d       	andi	r24, 0xDF	; 223
 2c4:	8b b9       	out	0x0b, r24	; 11
	PORTE &= ~(1<<PORTE5);
 2c6:	8e b1       	in	r24, 0x0e	; 14
 2c8:	8f 7d       	andi	r24, 0xDF	; 223
 2ca:	8e b9       	out	0x0e, r24	; 14
	PORTD &= ~(1<<PORTD2);
 2cc:	8b b1       	in	r24, 0x0b	; 11
 2ce:	8b 7f       	andi	r24, 0xFB	; 251
 2d0:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~(1<<PORTD0);
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	8e 7f       	andi	r24, 0xFE	; 254
 2d6:	8b b9       	out	0x0b, r24	; 11
	play_speaker(2);
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
	
	//turn off the LEDs again
	turn_off_leds();
 2e0:	0e 94 1c 01 	call	0x238	; 0x238 <turn_off_leds>
	
	
	//reset to level 1
	LVL = 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <LVL+0x1>
 2ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LVL>
	
	//regenerate pattern for simon board
	generate_simon_pattern();
 2f0:	0e 94 98 00 	call	0x130	; 0x130 <generate_simon_pattern>
 2f4:	08 95       	ret

000002f6 <win_game>:

//call function if the game was won
void win_game()
{
	//turn off LEDs
	turn_off_leds();
 2f6:	0e 94 1c 01 	call	0x238	; 0x238 <turn_off_leds>
	
	//turn on all LEDs
	PORTD = 0x00;
 2fa:	1b b8       	out	0x0b, r1	; 11
	PORTE = ~(1<<PORTE5);
 2fc:	8f ed       	ldi	r24, 0xDF	; 223
 2fe:	8e b9       	out	0x0e, r24	; 14
	play_speaker(64);
 300:	80 e4       	ldi	r24, 0x40	; 64
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
	
	//turn off LEDs
	turn_off_leds();
 308:	0e 94 1c 01 	call	0x238	; 0x238 <turn_off_leds>
	
	//reset to level 1
	LVL = 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <LVL+0x1>
 314:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LVL>
	
	//regenerate pattern for simon board
	generate_simon_pattern();
 318:	0e 94 98 00 	call	0x130	; 0x130 <generate_simon_pattern>
 31c:	08 95       	ret

0000031e <two_to_the_power_of>:
//used by play_sequence function
//returns 2 ^ (power_to + 1)
//must be 1, 2, 3, 4, or it returns 0
int two_to_the_power_of(int power_to)
{
	if ((power_to <= 0) || (power_to > 4)) return 0;
 31e:	9c 01       	movw	r18, r24
 320:	21 50       	subi	r18, 0x01	; 1
 322:	31 09       	sbc	r19, r1
 324:	24 30       	cpi	r18, 0x04	; 4
 326:	31 05       	cpc	r19, r1
 328:	78 f4       	brcc	.+30     	; 0x348 <two_to_the_power_of+0x2a>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	04 c0       	rjmp	.+8      	; 0x33c <two_to_the_power_of+0x1e>
	
	int return_val = 1;
	for(int j=0; j <= power_to; j++)
	{
		return_val *= 2;
 334:	44 0f       	add	r20, r20
 336:	55 1f       	adc	r21, r21
int two_to_the_power_of(int power_to)
{
	if ((power_to <= 0) || (power_to > 4)) return 0;
	
	int return_val = 1;
	for(int j=0; j <= power_to; j++)
 338:	2f 5f       	subi	r18, 0xFF	; 255
 33a:	3f 4f       	sbci	r19, 0xFF	; 255
 33c:	82 17       	cp	r24, r18
 33e:	93 07       	cpc	r25, r19
 340:	cc f7       	brge	.-14     	; 0x334 <two_to_the_power_of+0x16>
	{
		return_val *= 2;
	}
	
	return return_val;
 342:	84 2f       	mov	r24, r20
 344:	95 2f       	mov	r25, r21
 346:	08 95       	ret
//used by play_sequence function
//returns 2 ^ (power_to + 1)
//must be 1, 2, 3, 4, or it returns 0
int two_to_the_power_of(int power_to)
{
	if ((power_to <= 0) || (power_to > 4)) return 0;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
	{
		return_val *= 2;
	}
	
	return return_val;
}
 34c:	08 95       	ret

0000034e <play_sequence>:

//plays the sequence of leds you need to get right
//sequence of (1, 2, 3, 4) values
void play_sequence()
{
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
	for(int i=0; i<LVL; i++){
 356:	00 e0       	ldi	r16, 0x00	; 0
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	17 c0       	rjmp	.+46     	; 0x38a <play_sequence+0x3c>
		light_simon_led(SEQUENCE[i]);
 35c:	e8 01       	movw	r28, r16
 35e:	cc 0f       	add	r28, r28
 360:	dd 1f       	adc	r29, r29
 362:	ca 5f       	subi	r28, 0xFA	; 250
 364:	de 4f       	sbci	r29, 0xFE	; 254
 366:	88 81       	ld	r24, Y
 368:	99 81       	ldd	r25, Y+1	; 0x01
 36a:	0e 94 c3 00 	call	0x186	; 0x186 <light_simon_led>
		play_speaker(two_to_the_power_of(SEQUENCE[i]));
 36e:	88 81       	ld	r24, Y
 370:	99 81       	ldd	r25, Y+1	; 0x01
 372:	0e 94 8f 01 	call	0x31e	; 0x31e <two_to_the_power_of>
 376:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
		//play_speaker(SEQUENCE[i]*4);
		light_simon_led(0);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 c3 00 	call	0x186	; 0x186 <light_simon_led>
		half_second_delay();
 382:	0e 94 06 01 	call	0x20c	; 0x20c <half_second_delay>

//plays the sequence of leds you need to get right
//sequence of (1, 2, 3, 4) values
void play_sequence()
{
	for(int i=0; i<LVL; i++){
 386:	0f 5f       	subi	r16, 0xFF	; 255
 388:	1f 4f       	sbci	r17, 0xFF	; 255
 38a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LVL>
 38e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LVL+0x1>
 392:	08 17       	cp	r16, r24
 394:	19 07       	cpc	r17, r25
 396:	14 f3       	brlt	.-60     	; 0x35c <play_sequence+0xe>
		play_speaker(two_to_the_power_of(SEQUENCE[i]));
		//play_speaker(SEQUENCE[i]*4);
		light_simon_led(0);
		half_second_delay();
	}
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	08 95       	ret

000003a2 <wait_until_ready_to_play>:

//initial / restart 'screen'
//press button 1 to escape it to play the game
void wait_until_ready_to_play()
{
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
	int waiting = 1;
 3a6:	c1 e0       	ldi	r28, 0x01	; 1
 3a8:	d0 e0       	ldi	r29, 0x00	; 0
	while (waiting)
 3aa:	15 c0       	rjmp	.+42     	; 0x3d6 <wait_until_ready_to_play+0x34>
	{
		half_second_delay();
 3ac:	0e 94 06 01 	call	0x20c	; 0x20c <half_second_delay>
		half_second_delay();
 3b0:	0e 94 06 01 	call	0x20c	; 0x20c <half_second_delay>
		if (!(PINA & (1 << PINA0)))
 3b4:	00 99       	sbic	0x00, 0	; 0
 3b6:	0b c0       	rjmp	.+22     	; 0x3ce <wait_until_ready_to_play+0x2c>
		{
			waiting = 0;
			PORTD &= ~(1<<PORTD0);
 3b8:	8b b1       	in	r24, 0x0b	; 11
 3ba:	8e 7f       	andi	r24, 0xFE	; 254
 3bc:	8b b9       	out	0x0b, r24	; 11
			play_speaker(1);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINA & (1 << PINA0))); //wait until unclicked
 3c6:	00 9b       	sbis	0x00, 0	; 0
 3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <wait_until_ready_to_play+0x24>
	{
		half_second_delay();
		half_second_delay();
		if (!(PINA & (1 << PINA0)))
		{
			waiting = 0;
 3ca:	c0 e0       	ldi	r28, 0x00	; 0
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
			PORTD &= ~(1<<PORTD0);
			play_speaker(1);
			while (!(PINA & (1 << PINA0))); //wait until unclicked
		}
		PORTD ^= (1<<PORTD0);
 3ce:	9b b1       	in	r25, 0x0b	; 11
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	89 27       	eor	r24, r25
 3d4:	8b b9       	out	0x0b, r24	; 11
//initial / restart 'screen'
//press button 1 to escape it to play the game
void wait_until_ready_to_play()
{
	int waiting = 1;
	while (waiting)
 3d6:	20 97       	sbiw	r28, 0x00	; 0
 3d8:	49 f7       	brne	.-46     	; 0x3ac <wait_until_ready_to_play+0xa>
			play_speaker(1);
			while (!(PINA & (1 << PINA0))); //wait until unclicked
		}
		PORTD ^= (1<<PORTD0);
	}
	PORTD |= (1<<PORTD0);
 3da:	8b b1       	in	r24, 0x0b	; 11
 3dc:	81 60       	ori	r24, 0x01	; 1
 3de:	8b b9       	out	0x0b, r24	; 11
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <wait_until_button_clicked>:

//wait until a buton clicked, then return the value
int wait_until_button_clicked()
{
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
	int button_state = 0;
 3ea:	c0 e0       	ldi	r28, 0x00	; 0
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
	while(button_state==0)
 3ee:	47 c0       	rjmp	.+142    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	{
		//all these buttons wait until they're unpressed before continuing
		//prevents unintentional button spamming
		//button 5 pressed
		if (!(PINE & (1 << PINE6)))
 3f0:	66 99       	sbic	0x0c, 6	; 12
 3f2:	0f c0       	rjmp	.+30     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		{
			button_state = 1;
			light_simon_led(button_state);
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 c3 00 	call	0x186	; 0x186 <light_simon_led>
			play_speaker(two_to_the_power_of(button_state));
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 8f 01 	call	0x31e	; 0x31e <two_to_the_power_of>
 404:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINE & (1 << PINE6)));
 408:	66 9b       	sbis	0x0c, 6	; 12
 40a:	fe cf       	rjmp	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		//all these buttons wait until they're unpressed before continuing
		//prevents unintentional button spamming
		//button 5 pressed
		if (!(PINE & (1 << PINE6)))
		{
			button_state = 1;
 40c:	c1 e0       	ldi	r28, 0x01	; 1
 40e:	d0 e0       	ldi	r29, 0x00	; 0
 410:	32 c0       	rjmp	.+100    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			light_simon_led(button_state);
			play_speaker(two_to_the_power_of(button_state));
			while (!(PINE & (1 << PINE6)));
		}
		//button 6 pressed
		else if (!(PINA & (1 << PINA4)))
 412:	04 99       	sbic	0x00, 4	; 0
 414:	0f c0       	rjmp	.+30     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		{
			button_state = 2;
			light_simon_led(button_state);
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 c3 00 	call	0x186	; 0x186 <light_simon_led>
			play_speaker(two_to_the_power_of(button_state));
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 8f 01 	call	0x31e	; 0x31e <two_to_the_power_of>
 426:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINA & (1 << PINA4)));
 42a:	04 9b       	sbis	0x00, 4	; 0
 42c:	fe cf       	rjmp	.-4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			while (!(PINE & (1 << PINE6)));
		}
		//button 6 pressed
		else if (!(PINA & (1 << PINA4)))
		{
			button_state = 2;
 42e:	c2 e0       	ldi	r28, 0x02	; 2
 430:	d0 e0       	ldi	r29, 0x00	; 0
 432:	21 c0       	rjmp	.+66     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			light_simon_led(button_state);
			play_speaker(two_to_the_power_of(button_state));
			while (!(PINA & (1 << PINA4)));
		}
		//button 8 pressed
		else if (!(PINA & (1 << PINA6)))
 434:	06 99       	sbic	0x00, 6	; 0
 436:	0f c0       	rjmp	.+30     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		{
			button_state = 3;
			light_simon_led(button_state);
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 c3 00 	call	0x186	; 0x186 <light_simon_led>
			play_speaker(two_to_the_power_of(button_state));
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 8f 01 	call	0x31e	; 0x31e <two_to_the_power_of>
 448:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINA & (1 << PINA6)));
 44c:	06 9b       	sbis	0x00, 6	; 0
 44e:	fe cf       	rjmp	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
			while (!(PINA & (1 << PINA4)));
		}
		//button 8 pressed
		else if (!(PINA & (1 << PINA6)))
		{
			button_state = 3;
 450:	c3 e0       	ldi	r28, 0x03	; 3
 452:	d0 e0       	ldi	r29, 0x00	; 0
 454:	10 c0       	rjmp	.+32     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			light_simon_led(button_state);
			play_speaker(two_to_the_power_of(button_state));
			while (!(PINA & (1 << PINA6)));
		}
		//button 9 pressed
		else if (!(PINA & (1 << PINA7)))
 456:	07 99       	sbic	0x00, 7	; 0
 458:	0e c0       	rjmp	.+28     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
		{
			button_state = 4;
			light_simon_led(button_state);
 45a:	84 e0       	ldi	r24, 0x04	; 4
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 c3 00 	call	0x186	; 0x186 <light_simon_led>
			play_speaker(two_to_the_power_of(button_state));
 462:	84 e0       	ldi	r24, 0x04	; 4
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 8f 01 	call	0x31e	; 0x31e <two_to_the_power_of>
 46a:	0e 94 22 01 	call	0x244	; 0x244 <play_speaker>
			while (!(PINA & (1 << PINA7)));
 46e:	07 9b       	sbis	0x00, 7	; 0
 470:	fe cf       	rjmp	.-4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			while (!(PINA & (1 << PINA6)));
		}
		//button 9 pressed
		else if (!(PINA & (1 << PINA7)))
		{
			button_state = 4;
 472:	c4 e0       	ldi	r28, 0x04	; 4
 474:	d0 e0       	ldi	r29, 0x00	; 0
			light_simon_led(button_state);
			play_speaker(two_to_the_power_of(button_state));
			while (!(PINA & (1 << PINA7)));
		}
		light_simon_led(0); //turn off all led lights
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 c3 00 	call	0x186	; 0x186 <light_simon_led>

//wait until a buton clicked, then return the value
int wait_until_button_clicked()
{
	int button_state = 0;
	while(button_state==0)
 47e:	20 97       	sbiw	r28, 0x00	; 0
 480:	09 f4       	brne	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 482:	b6 cf       	rjmp	.-148    	; 0x3f0 <wait_until_button_clicked+0xa>
			while (!(PINA & (1 << PINA7)));
		}
		light_simon_led(0); //turn off all led lights
	}
	return button_state;
}
 484:	ce 01       	movw	r24, r28
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <play_game>:

void play_game()
{
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
	int button_state = 0;
	
	generate_simon_pattern();
 494:	0e 94 98 00 	call	0x130	; 0x130 <generate_simon_pattern>
	LVL = 1;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <LVL+0x1>
 4a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LVL>
	
	int playing = 1;
 4a4:	01 e0       	ldi	r16, 0x01	; 1
 4a6:	10 e0       	ldi	r17, 0x00	; 0
	while(playing)
 4a8:	3a c0       	rjmp	.+116    	; 0x51e <play_game+0x92>
	{
		if(LVL > MAX_LEVEL)
 4aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LVL>
 4ae:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LVL+0x1>
 4b2:	09 97       	sbiw	r24, 0x09	; 9
 4b4:	2c f0       	brlt	.+10     	; 0x4c0 <play_game+0x34>
		{
			playing = 0;
			win_game();
 4b6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <win_game>
	int playing = 1;
	while(playing)
	{
		if(LVL > MAX_LEVEL)
		{
			playing = 0;
 4ba:	00 e0       	ldi	r16, 0x00	; 0
 4bc:	10 e0       	ldi	r17, 0x00	; 0
 4be:	2f c0       	rjmp	.+94     	; 0x51e <play_game+0x92>
			win_game();
		}
		else
		{
			display_level_leds();
 4c0:	0e 94 ef 00 	call	0x1de	; 0x1de <display_level_leds>
			play_sequence();
 4c4:	0e 94 a7 01 	call	0x34e	; 0x34e <play_sequence>
			int buttons_pressed = 0;
 4c8:	c0 e0       	ldi	r28, 0x00	; 0
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
			while((buttons_pressed < LVL) && playing)
 4cc:	12 c0       	rjmp	.+36     	; 0x4f2 <play_game+0x66>
			{
				int button_clicked = wait_until_button_clicked();
 4ce:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <wait_until_button_clicked>
				if (button_clicked == SEQUENCE[buttons_pressed]) buttons_pressed++;
 4d2:	fe 01       	movw	r30, r28
 4d4:	ee 0f       	add	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	ea 5f       	subi	r30, 0xFA	; 250
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	20 81       	ld	r18, Z
 4de:	31 81       	ldd	r19, Z+1	; 0x01
 4e0:	82 17       	cp	r24, r18
 4e2:	93 07       	cpc	r25, r19
 4e4:	11 f4       	brne	.+4      	; 0x4ea <play_game+0x5e>
 4e6:	21 96       	adiw	r28, 0x01	; 1
 4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <play_game+0x66>
				else
				{
					lose_game();
 4ea:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lose_game>
					playing = 0;
 4ee:	00 e0       	ldi	r16, 0x00	; 0
 4f0:	10 e0       	ldi	r17, 0x00	; 0
		else
		{
			display_level_leds();
			play_sequence();
			int buttons_pressed = 0;
			while((buttons_pressed < LVL) && playing)
 4f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LVL>
 4f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LVL+0x1>
 4fa:	c8 17       	cp	r28, r24
 4fc:	d9 07       	cpc	r29, r25
 4fe:	1c f4       	brge	.+6      	; 0x506 <play_game+0x7a>
 500:	01 15       	cp	r16, r1
 502:	11 05       	cpc	r17, r1
 504:	21 f7       	brne	.-56     	; 0x4ce <play_game+0x42>
				{
					lose_game();
					playing = 0;
				}
			}
			if (playing) LVL++;
 506:	01 15       	cp	r16, r1
 508:	11 05       	cpc	r17, r1
 50a:	29 f0       	breq	.+10     	; 0x516 <play_game+0x8a>
 50c:	01 96       	adiw	r24, 0x01	; 1
 50e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <LVL+0x1>
 512:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LVL>
			half_second_delay();
 516:	0e 94 06 01 	call	0x20c	; 0x20c <half_second_delay>
			half_second_delay();
 51a:	0e 94 06 01 	call	0x20c	; 0x20c <half_second_delay>
	
	generate_simon_pattern();
	LVL = 1;
	
	int playing = 1;
	while(playing)
 51e:	01 15       	cp	r16, r1
 520:	11 05       	cpc	r17, r1
 522:	19 f6       	brne	.-122    	; 0x4aa <play_game+0x1e>
			if (playing) LVL++;
			half_second_delay();
			half_second_delay();
		}
	}
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	08 95       	ret

0000052e <main>:

int main(void)
{
	initialize_ports();
 52e:	0e 94 b6 00 	call	0x16c	; 0x16c <initialize_ports>
	srand(time(NULL));
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 85 00 	call	0x10a	; 0x10a <time>
 53a:	cb 01       	movw	r24, r22
 53c:	0e 94 22 03 	call	0x644	; 0x644 <srand>
	while(1)
	{
		wait_until_ready_to_play();
 540:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <wait_until_ready_to_play>
		half_second_delay();
 544:	0e 94 06 01 	call	0x20c	; 0x20c <half_second_delay>
		half_second_delay();
 548:	0e 94 06 01 	call	0x20c	; 0x20c <half_second_delay>
		play_game();
 54c:	0e 94 46 02 	call	0x48c	; 0x48c <play_game>
 550:	f7 cf       	rjmp	.-18     	; 0x540 <main+0x12>

00000552 <__divmodhi4>:
 552:	97 fb       	bst	r25, 7
 554:	07 2e       	mov	r0, r23
 556:	16 f4       	brtc	.+4      	; 0x55c <__divmodhi4+0xa>
 558:	00 94       	com	r0
 55a:	07 d0       	rcall	.+14     	; 0x56a <__divmodhi4_neg1>
 55c:	77 fd       	sbrc	r23, 7
 55e:	09 d0       	rcall	.+18     	; 0x572 <__divmodhi4_neg2>
 560:	0e 94 bd 02 	call	0x57a	; 0x57a <__udivmodhi4>
 564:	07 fc       	sbrc	r0, 7
 566:	05 d0       	rcall	.+10     	; 0x572 <__divmodhi4_neg2>
 568:	3e f4       	brtc	.+14     	; 0x578 <__divmodhi4_exit>

0000056a <__divmodhi4_neg1>:
 56a:	90 95       	com	r25
 56c:	81 95       	neg	r24
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	08 95       	ret

00000572 <__divmodhi4_neg2>:
 572:	70 95       	com	r23
 574:	61 95       	neg	r22
 576:	7f 4f       	sbci	r23, 0xFF	; 255

00000578 <__divmodhi4_exit>:
 578:	08 95       	ret

0000057a <__udivmodhi4>:
 57a:	aa 1b       	sub	r26, r26
 57c:	bb 1b       	sub	r27, r27
 57e:	51 e1       	ldi	r21, 0x11	; 17
 580:	07 c0       	rjmp	.+14     	; 0x590 <__udivmodhi4_ep>

00000582 <__udivmodhi4_loop>:
 582:	aa 1f       	adc	r26, r26
 584:	bb 1f       	adc	r27, r27
 586:	a6 17       	cp	r26, r22
 588:	b7 07       	cpc	r27, r23
 58a:	10 f0       	brcs	.+4      	; 0x590 <__udivmodhi4_ep>
 58c:	a6 1b       	sub	r26, r22
 58e:	b7 0b       	sbc	r27, r23

00000590 <__udivmodhi4_ep>:
 590:	88 1f       	adc	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	5a 95       	dec	r21
 596:	a9 f7       	brne	.-22     	; 0x582 <__udivmodhi4_loop>
 598:	80 95       	com	r24
 59a:	90 95       	com	r25
 59c:	bc 01       	movw	r22, r24
 59e:	cd 01       	movw	r24, r26
 5a0:	08 95       	ret

000005a2 <do_rand>:
 5a2:	8f 92       	push	r8
 5a4:	9f 92       	push	r9
 5a6:	af 92       	push	r10
 5a8:	bf 92       	push	r11
 5aa:	cf 92       	push	r12
 5ac:	df 92       	push	r13
 5ae:	ef 92       	push	r14
 5b0:	ff 92       	push	r15
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	ec 01       	movw	r28, r24
 5b8:	68 81       	ld	r22, Y
 5ba:	79 81       	ldd	r23, Y+1	; 0x01
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	9b 81       	ldd	r25, Y+3	; 0x03
 5c0:	61 15       	cp	r22, r1
 5c2:	71 05       	cpc	r23, r1
 5c4:	81 05       	cpc	r24, r1
 5c6:	91 05       	cpc	r25, r1
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <do_rand+0x30>
 5ca:	64 e2       	ldi	r22, 0x24	; 36
 5cc:	79 ed       	ldi	r23, 0xD9	; 217
 5ce:	8b e5       	ldi	r24, 0x5B	; 91
 5d0:	97 e0       	ldi	r25, 0x07	; 7
 5d2:	2d e1       	ldi	r18, 0x1D	; 29
 5d4:	33 ef       	ldi	r19, 0xF3	; 243
 5d6:	41 e0       	ldi	r20, 0x01	; 1
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodsi4>
 5de:	49 01       	movw	r8, r18
 5e0:	5a 01       	movw	r10, r20
 5e2:	9b 01       	movw	r18, r22
 5e4:	ac 01       	movw	r20, r24
 5e6:	a7 ea       	ldi	r26, 0xA7	; 167
 5e8:	b1 e4       	ldi	r27, 0x41	; 65
 5ea:	0e 94 4c 03 	call	0x698	; 0x698 <__muluhisi3>
 5ee:	6b 01       	movw	r12, r22
 5f0:	7c 01       	movw	r14, r24
 5f2:	ac ee       	ldi	r26, 0xEC	; 236
 5f4:	b4 ef       	ldi	r27, 0xF4	; 244
 5f6:	a5 01       	movw	r20, r10
 5f8:	94 01       	movw	r18, r8
 5fa:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__mulohisi3>
 5fe:	dc 01       	movw	r26, r24
 600:	cb 01       	movw	r24, r22
 602:	8c 0d       	add	r24, r12
 604:	9d 1d       	adc	r25, r13
 606:	ae 1d       	adc	r26, r14
 608:	bf 1d       	adc	r27, r15
 60a:	b7 ff       	sbrs	r27, 7
 60c:	03 c0       	rjmp	.+6      	; 0x614 <do_rand+0x72>
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	a1 09       	sbc	r26, r1
 612:	b0 48       	sbci	r27, 0x80	; 128
 614:	88 83       	st	Y, r24
 616:	99 83       	std	Y+1, r25	; 0x01
 618:	aa 83       	std	Y+2, r26	; 0x02
 61a:	bb 83       	std	Y+3, r27	; 0x03
 61c:	9f 77       	andi	r25, 0x7F	; 127
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	ff 90       	pop	r15
 624:	ef 90       	pop	r14
 626:	df 90       	pop	r13
 628:	cf 90       	pop	r12
 62a:	bf 90       	pop	r11
 62c:	af 90       	pop	r10
 62e:	9f 90       	pop	r9
 630:	8f 90       	pop	r8
 632:	08 95       	ret

00000634 <rand_r>:
 634:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <do_rand>
 638:	08 95       	ret

0000063a <rand>:
 63a:	80 e0       	ldi	r24, 0x00	; 0
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <do_rand>
 642:	08 95       	ret

00000644 <srand>:
 644:	a0 e0       	ldi	r26, 0x00	; 0
 646:	b0 e0       	ldi	r27, 0x00	; 0
 648:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 64c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 650:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 654:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 658:	08 95       	ret

0000065a <__divmodsi4>:
 65a:	05 2e       	mov	r0, r21
 65c:	97 fb       	bst	r25, 7
 65e:	1e f4       	brtc	.+6      	; 0x666 <__divmodsi4+0xc>
 660:	00 94       	com	r0
 662:	0e 94 44 03 	call	0x688	; 0x688 <__negsi2>
 666:	57 fd       	sbrc	r21, 7
 668:	07 d0       	rcall	.+14     	; 0x678 <__divmodsi4_neg2>
 66a:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodsi4>
 66e:	07 fc       	sbrc	r0, 7
 670:	03 d0       	rcall	.+6      	; 0x678 <__divmodsi4_neg2>
 672:	4e f4       	brtc	.+18     	; 0x686 <__divmodsi4_exit>
 674:	0c 94 44 03 	jmp	0x688	; 0x688 <__negsi2>

00000678 <__divmodsi4_neg2>:
 678:	50 95       	com	r21
 67a:	40 95       	com	r20
 67c:	30 95       	com	r19
 67e:	21 95       	neg	r18
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	4f 4f       	sbci	r20, 0xFF	; 255
 684:	5f 4f       	sbci	r21, 0xFF	; 255

00000686 <__divmodsi4_exit>:
 686:	08 95       	ret

00000688 <__negsi2>:
 688:	90 95       	com	r25
 68a:	80 95       	com	r24
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255
 692:	8f 4f       	sbci	r24, 0xFF	; 255
 694:	9f 4f       	sbci	r25, 0xFF	; 255
 696:	08 95       	ret

00000698 <__muluhisi3>:
 698:	0e 94 81 03 	call	0x702	; 0x702 <__umulhisi3>
 69c:	a5 9f       	mul	r26, r21
 69e:	90 0d       	add	r25, r0
 6a0:	b4 9f       	mul	r27, r20
 6a2:	90 0d       	add	r25, r0
 6a4:	a4 9f       	mul	r26, r20
 6a6:	80 0d       	add	r24, r0
 6a8:	91 1d       	adc	r25, r1
 6aa:	11 24       	eor	r1, r1
 6ac:	08 95       	ret

000006ae <__mulshisi3>:
 6ae:	b7 ff       	sbrs	r27, 7
 6b0:	0c 94 4c 03 	jmp	0x698	; 0x698 <__muluhisi3>

000006b4 <__mulohisi3>:
 6b4:	0e 94 4c 03 	call	0x698	; 0x698 <__muluhisi3>
 6b8:	82 1b       	sub	r24, r18
 6ba:	93 0b       	sbc	r25, r19
 6bc:	08 95       	ret

000006be <__udivmodsi4>:
 6be:	a1 e2       	ldi	r26, 0x21	; 33
 6c0:	1a 2e       	mov	r1, r26
 6c2:	aa 1b       	sub	r26, r26
 6c4:	bb 1b       	sub	r27, r27
 6c6:	fd 01       	movw	r30, r26
 6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <__udivmodsi4_ep>

000006ca <__udivmodsi4_loop>:
 6ca:	aa 1f       	adc	r26, r26
 6cc:	bb 1f       	adc	r27, r27
 6ce:	ee 1f       	adc	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	a2 17       	cp	r26, r18
 6d4:	b3 07       	cpc	r27, r19
 6d6:	e4 07       	cpc	r30, r20
 6d8:	f5 07       	cpc	r31, r21
 6da:	20 f0       	brcs	.+8      	; 0x6e4 <__udivmodsi4_ep>
 6dc:	a2 1b       	sub	r26, r18
 6de:	b3 0b       	sbc	r27, r19
 6e0:	e4 0b       	sbc	r30, r20
 6e2:	f5 0b       	sbc	r31, r21

000006e4 <__udivmodsi4_ep>:
 6e4:	66 1f       	adc	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	1a 94       	dec	r1
 6ee:	69 f7       	brne	.-38     	; 0x6ca <__udivmodsi4_loop>
 6f0:	60 95       	com	r22
 6f2:	70 95       	com	r23
 6f4:	80 95       	com	r24
 6f6:	90 95       	com	r25
 6f8:	9b 01       	movw	r18, r22
 6fa:	ac 01       	movw	r20, r24
 6fc:	bd 01       	movw	r22, r26
 6fe:	cf 01       	movw	r24, r30
 700:	08 95       	ret

00000702 <__umulhisi3>:
 702:	a2 9f       	mul	r26, r18
 704:	b0 01       	movw	r22, r0
 706:	b3 9f       	mul	r27, r19
 708:	c0 01       	movw	r24, r0
 70a:	a3 9f       	mul	r26, r19
 70c:	70 0d       	add	r23, r0
 70e:	81 1d       	adc	r24, r1
 710:	11 24       	eor	r1, r1
 712:	91 1d       	adc	r25, r1
 714:	b2 9f       	mul	r27, r18
 716:	70 0d       	add	r23, r0
 718:	81 1d       	adc	r24, r1
 71a:	11 24       	eor	r1, r1
 71c:	91 1d       	adc	r25, r1
 71e:	08 95       	ret

00000720 <_exit>:
 720:	f8 94       	cli

00000722 <__stop_program>:
 722:	ff cf       	rjmp	.-2      	; 0x722 <__stop_program>
