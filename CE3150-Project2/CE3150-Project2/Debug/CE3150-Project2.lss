
CE3150-Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000292  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cd1  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b21  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000480  00000000  00000000  00001b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000126  00000000  00000000  00002641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002767  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_15>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee e1       	ldi	r30, 0x1E	; 30
  e0:	f2 e0       	ldi	r31, 0x02	; 2
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a0 30       	cpi	r26, 0x00	; 0
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a2 30       	cpi	r26, 0x02	; 2
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 00 01 	call	0x200	; 0x200 <main>
 102:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <initialize_ports>:
	
	//this logic only works if there is up to 8 levels, and there isn't a level 0
	//as there is only 3 leds to display the level
	if (LVL==0 || LVL > MAX_LEVEL)	return;
	//display current levels on leds
	PORTD &= ~(LVL-1);
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	8a b9       	out	0x0a, r24	; 10
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	9d b9       	out	0x0d, r25	; 13
 112:	9b b1       	in	r25, 0x0b	; 11
 114:	8b b9       	out	0x0b, r24	; 11
 116:	8e b1       	in	r24, 0x0e	; 14
 118:	80 63       	ori	r24, 0x30	; 48
 11a:	8e b9       	out	0x0e, r24	; 14
 11c:	08 95       	ret

0000011e <light_simon_led>:
 11e:	9c 01       	movw	r18, r24
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	90 68       	ori	r25, 0x80	; 128
 124:	9b b9       	out	0x0b, r25	; 11
 126:	9b b1       	in	r25, 0x0b	; 11
 128:	90 64       	ori	r25, 0x40	; 64
 12a:	9b b9       	out	0x0b, r25	; 11
 12c:	9b b1       	in	r25, 0x0b	; 11
 12e:	90 61       	ori	r25, 0x10	; 16
 130:	9b b9       	out	0x0b, r25	; 11
 132:	9e b1       	in	r25, 0x0e	; 14
 134:	90 62       	ori	r25, 0x20	; 32
 136:	9e b9       	out	0x0e, r25	; 14
 138:	22 30       	cpi	r18, 0x02	; 2
 13a:	31 05       	cpc	r19, r1
 13c:	81 f0       	breq	.+32     	; 0x15e <light_simon_led+0x40>
 13e:	24 f4       	brge	.+8      	; 0x148 <light_simon_led+0x2a>
 140:	21 30       	cpi	r18, 0x01	; 1
 142:	31 05       	cpc	r19, r1
 144:	41 f0       	breq	.+16     	; 0x156 <light_simon_led+0x38>
 146:	08 95       	ret
 148:	23 30       	cpi	r18, 0x03	; 3
 14a:	31 05       	cpc	r19, r1
 14c:	61 f0       	breq	.+24     	; 0x166 <light_simon_led+0x48>
 14e:	24 30       	cpi	r18, 0x04	; 4
 150:	31 05       	cpc	r19, r1
 152:	69 f0       	breq	.+26     	; 0x16e <light_simon_led+0x50>
 154:	08 95       	ret
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	08 95       	ret
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	8f 7b       	andi	r24, 0xBF	; 191
 162:	8b b9       	out	0x0b, r24	; 11
 164:	08 95       	ret
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8f 7e       	andi	r24, 0xEF	; 239
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	08 95       	ret
 16e:	8e b1       	in	r24, 0x0e	; 14
 170:	8f 7d       	andi	r24, 0xDF	; 223
 172:	8e b9       	out	0x0e, r24	; 14
 174:	08 95       	ret

00000176 <time_delay>:
}

int timer_counter = 0;

void time_delay() {
	TCCR1B |= (1 << CS12) | (1 << CS10);
 176:	e1 e8       	ldi	r30, 0x81	; 129
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	85 60       	ori	r24, 0x05	; 5
 17e:	80 83       	st	Z, r24
	TCNT1 = TIMER_VALUE;
 180:	85 e8       	ldi	r24, 0x85	; 133
 182:	9e e1       	ldi	r25, 0x1E	; 30
 184:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 188:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 |= (1 << TOIE1);
 18c:	ef e6       	ldi	r30, 0x6F	; 111
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	81 60       	ori	r24, 0x01	; 1
 194:	80 83       	st	Z, r24
	sei();
 196:	78 94       	sei
	
	while(timer_counter < 1);
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a0:	18 16       	cp	r1, r24
 1a2:	19 06       	cpc	r1, r25
 1a4:	cc f7       	brge	.-14     	; 0x198 <time_delay+0x22>
}
 1a6:	08 95       	ret

000001a8 <__vector_15>:

ISR(TIMER1_OVF_vect) {
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
	timer_counter++;
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (timer_counter >= 1) {
 1cc:	18 16       	cp	r1, r24
 1ce:	19 06       	cpc	r1, r25
 1d0:	44 f4       	brge	.+16     	; 0x1e2 <__vector_15+0x3a>
		// Disable Timer/Counter1 overflow interrupt
		TIMSK1 &= ~(1 << TOIE1);
 1d2:	ef e6       	ldi	r30, 0x6F	; 111
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	8e 7f       	andi	r24, 0xFE	; 254
 1da:	80 83       	st	Z, r24
		PORTD &= ~(1<<PORTD4);
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	8f 7e       	andi	r24, 0xEF	; 239
 1e0:	8b b9       	out	0x0b, r24	; 11
	}
	TCNT1 = TIMER_VALUE;
 1e2:	85 e8       	ldi	r24, 0x85	; 133
 1e4:	9e e1       	ldi	r25, 0x1E	; 30
 1e6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1ea:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <main>:


int main(void)
{
	initialize_ports();
 200:	0e 94 85 00 	call	0x10a	; 0x10a <initialize_ports>
	//PORTD = 0x00;
	//display_level_leds();
	light_simon_led(4);
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 8f 00 	call	0x11e	; 0x11e <light_simon_led>
	time_delay();
 20c:	0e 94 bb 00 	call	0x176	; 0x176 <time_delay>
	light_simon_led(1);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 8f 00 	call	0x11e	; 0x11e <light_simon_led>
 218:	ff cf       	rjmp	.-2      	; 0x218 <main+0x18>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
