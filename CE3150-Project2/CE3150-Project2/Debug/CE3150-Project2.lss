
CE3150-Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000043e  000004d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800108  00800108  000004da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d28  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b34  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052a  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c3  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016e  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002b35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_15>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee e3       	ldi	r30, 0x3E	; 62
  e0:	f4 e0       	ldi	r31, 0x04	; 4
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a8 30       	cpi	r26, 0x08	; 8
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a8 e0       	ldi	r26, 0x08	; 8
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a2 32       	cpi	r26, 0x22	; 34
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 35 01 	call	0x26a	; 0x26a <main>
 102:	0c 94 1d 02 	jmp	0x43a	; 0x43a <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <time>:
 10a:	fc 01       	movw	r30, r24
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__system_time>
 114:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__system_time+0x1>
 118:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__system_time+0x2>
 11c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__system_time+0x3>
 120:	0f be       	out	0x3f, r0	; 63
 122:	30 97       	sbiw	r30, 0x00	; 0
 124:	21 f0       	breq	.+8      	; 0x12e <time+0x24>
 126:	60 83       	st	Z, r22
 128:	71 83       	std	Z+1, r23	; 0x01
 12a:	82 83       	std	Z+2, r24	; 0x02
 12c:	93 83       	std	Z+3, r25	; 0x03
 12e:	08 95       	ret

00000130 <initialization_function>:
	TCNT1 = TIMER_VALUE;
	TIMSK1 |= (1 << TOIE1);
	sei();
	
	while(timer_counter < 1);
}
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 85 00 	call	0x10a	; 0x10a <time>
 13c:	cb 01       	movw	r24, r22
 13e:	0e 94 af 01 	call	0x35e	; 0x35e <srand>
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
 146:	13 c0       	rjmp	.+38     	; 0x16e <initialization_function+0x3e>
 148:	0e 94 aa 01 	call	0x354	; 0x354 <rand>
 14c:	83 70       	andi	r24, 0x03	; 3
 14e:	90 78       	andi	r25, 0x80	; 128
 150:	99 23       	and	r25, r25
 152:	24 f4       	brge	.+8      	; 0x15c <initialization_function+0x2c>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	8c 6f       	ori	r24, 0xFC	; 252
 158:	9f 6f       	ori	r25, 0xFF	; 255
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	fe 01       	movw	r30, r28
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	e8 5f       	subi	r30, 0xF8	; 248
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	91 83       	std	Z+1, r25	; 0x01
 16a:	80 83       	st	Z, r24
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	c8 30       	cpi	r28, 0x08	; 8
 170:	d1 05       	cpc	r29, r1
 172:	54 f3       	brlt	.-44     	; 0x148 <initialization_function+0x18>
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <initialize_ports>:
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	8a b9       	out	0x0a, r24	; 10
 17e:	90 e3       	ldi	r25, 0x30	; 48
 180:	9d b9       	out	0x0d, r25	; 13
 182:	9b b1       	in	r25, 0x0b	; 11
 184:	8b b9       	out	0x0b, r24	; 11
 186:	8e b1       	in	r24, 0x0e	; 14
 188:	80 63       	ori	r24, 0x30	; 48
 18a:	8e b9       	out	0x0e, r24	; 14
 18c:	08 95       	ret

0000018e <light_simon_led>:
 18e:	9c 01       	movw	r18, r24
 190:	9b b1       	in	r25, 0x0b	; 11
 192:	90 68       	ori	r25, 0x80	; 128
 194:	9b b9       	out	0x0b, r25	; 11
 196:	9b b1       	in	r25, 0x0b	; 11
 198:	90 64       	ori	r25, 0x40	; 64
 19a:	9b b9       	out	0x0b, r25	; 11
 19c:	9b b1       	in	r25, 0x0b	; 11
 19e:	90 61       	ori	r25, 0x10	; 16
 1a0:	9b b9       	out	0x0b, r25	; 11
 1a2:	9e b1       	in	r25, 0x0e	; 14
 1a4:	90 62       	ori	r25, 0x20	; 32
 1a6:	9e b9       	out	0x0e, r25	; 14
 1a8:	22 30       	cpi	r18, 0x02	; 2
 1aa:	31 05       	cpc	r19, r1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <light_simon_led+0x40>
 1ae:	24 f4       	brge	.+8      	; 0x1b8 <light_simon_led+0x2a>
 1b0:	21 30       	cpi	r18, 0x01	; 1
 1b2:	31 05       	cpc	r19, r1
 1b4:	41 f0       	breq	.+16     	; 0x1c6 <light_simon_led+0x38>
 1b6:	08 95       	ret
 1b8:	23 30       	cpi	r18, 0x03	; 3
 1ba:	31 05       	cpc	r19, r1
 1bc:	61 f0       	breq	.+24     	; 0x1d6 <light_simon_led+0x48>
 1be:	24 30       	cpi	r18, 0x04	; 4
 1c0:	31 05       	cpc	r19, r1
 1c2:	69 f0       	breq	.+26     	; 0x1de <light_simon_led+0x50>
 1c4:	08 95       	ret
 1c6:	8b b1       	in	r24, 0x0b	; 11
 1c8:	8f 77       	andi	r24, 0x7F	; 127
 1ca:	8b b9       	out	0x0b, r24	; 11
 1cc:	08 95       	ret
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	8f 7b       	andi	r24, 0xBF	; 191
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	08 95       	ret
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8f 7e       	andi	r24, 0xEF	; 239
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	08 95       	ret
 1de:	8e b1       	in	r24, 0x0e	; 14
 1e0:	8f 7d       	andi	r24, 0xDF	; 223
 1e2:	8e b9       	out	0x0e, r24	; 14
 1e4:	08 95       	ret

000001e6 <__vector_15>:

ISR(TIMER1_OVF_vect) {
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	timer_counter++;
 1f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timer_counter>
 1fc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timer_counter+0x1>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timer_counter+0x1>
 206:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timer_counter>
	if (timer_counter >= 1) {
 20a:	18 16       	cp	r1, r24
 20c:	19 06       	cpc	r1, r25
 20e:	44 f4       	brge	.+16     	; 0x220 <__vector_15+0x3a>
		// Disable Timer/Counter1 overflow interrupt
		TIMSK1 &= ~(1 << TOIE1);
 210:	ef e6       	ldi	r30, 0x6F	; 111
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	8e 7f       	andi	r24, 0xFE	; 254
 218:	80 83       	st	Z, r24
		PORTD &= ~(1<<PORTD4);
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	8f 7e       	andi	r24, 0xEF	; 239
 21e:	8b b9       	out	0x0b, r24	; 11
	}
	TCNT1 = TIMER_VALUE;
 220:	85 e8       	ldi	r24, 0x85	; 133
 222:	9e e1       	ldi	r25, 0x1E	; 30
 224:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 228:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <half_second_delay>:
#define HALF_SECOND_ITERATIONS 15
//generates a half second delay on timer 0
// (255 * 1024 * 15) / (8 * 10^6) = .4896 seconds
void half_second_delay()
{
	TCNT0 = HALF_SECOND_TIMER_VAL;
 23e:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00;
 240:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS12) | (1 << CS10); // normal clock, prescaler 1024
 242:	85 b5       	in	r24, 0x25	; 37
 244:	85 60       	ori	r24, 0x05	; 5
 246:	85 bd       	out	0x25, r24	; 37
	
	int counter = 0;
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
	while(counter < HALF_SECOND_ITERATIONS)
 24c:	06 c0       	rjmp	.+12     	; 0x25a <half_second_delay+0x1c>
	{
		//poll until timer overflows
		while (!(TIFR0 & (1<<TOV0)));
 24e:	a8 9b       	sbis	0x15, 0	; 21
 250:	fe cf       	rjmp	.-4      	; 0x24e <half_second_delay+0x10>
		TCNT0 = HALF_SECOND_TIMER_VAL; //reset tcnt0
 252:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 1<<TOV0; //need to reset the overflow flag bit
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	25 bb       	out	0x15, r18	; 21
		counter++;
 258:	01 96       	adiw	r24, 0x01	; 1
	TCNT0 = HALF_SECOND_TIMER_VAL;
	TCCR0A = 0x00;
	TCCR0B |= (1 << CS12) | (1 << CS10); // normal clock, prescaler 1024
	
	int counter = 0;
	while(counter < HALF_SECOND_ITERATIONS)
 25a:	8f 30       	cpi	r24, 0x0F	; 15
 25c:	91 05       	cpc	r25, r1
 25e:	bc f3       	brlt	.-18     	; 0x24e <half_second_delay+0x10>
		TIFR0 = 1<<TOV0; //need to reset the overflow flag bit
		counter++;
	}
	
	//turn off timer0
	TCCR0A = 0x00;
 260:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x00;
 262:	15 bc       	out	0x25, r1	; 37
	TIFR0 = 1<<TOV0;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	85 bb       	out	0x15, r24	; 21
 268:	08 95       	ret

0000026a <main>:
}


int main(void)
{
	initialize_ports();
 26a:	0e 94 bd 00 	call	0x17a	; 0x17a <initialize_ports>
	//PORTD = 0x00;
	//display_level_leds();
	
	initialization_function();
 26e:	0e 94 98 00 	call	0x130	; 0x130 <initialization_function>
	
	LVL = MAX_LEVEL;
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <LVL+0x1>
 27a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <LVL>
	
	for(int i=0; i<LVL; i++){
 27e:	c0 e0       	ldi	r28, 0x00	; 0
 280:	d0 e0       	ldi	r29, 0x00	; 0
 282:	14 c0       	rjmp	.+40     	; 0x2ac <main+0x42>
		light_simon_led(SEQUENCE[i]);
 284:	fe 01       	movw	r30, r28
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	e8 5f       	subi	r30, 0xF8	; 248
 28c:	fe 4f       	sbci	r31, 0xFE	; 254
 28e:	80 81       	ld	r24, Z
 290:	91 81       	ldd	r25, Z+1	; 0x01
 292:	0e 94 c7 00 	call	0x18e	; 0x18e <light_simon_led>
		half_second_delay();
 296:	0e 94 1f 01 	call	0x23e	; 0x23e <half_second_delay>
		half_second_delay();
 29a:	0e 94 1f 01 	call	0x23e	; 0x23e <half_second_delay>
		light_simon_led(0);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 c7 00 	call	0x18e	; 0x18e <light_simon_led>
		half_second_delay();
 2a6:	0e 94 1f 01 	call	0x23e	; 0x23e <half_second_delay>
	
	initialization_function();
	
	LVL = MAX_LEVEL;
	
	for(int i=0; i<LVL; i++){
 2aa:	21 96       	adiw	r28, 0x01	; 1
 2ac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <LVL>
 2b0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <LVL+0x1>
 2b4:	c8 17       	cp	r28, r24
 2b6:	d9 07       	cpc	r29, r25
 2b8:	2c f3       	brlt	.-54     	; 0x284 <main+0x1a>
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <main+0x50>

000002bc <do_rand>:
 2bc:	8f 92       	push	r8
 2be:	9f 92       	push	r9
 2c0:	af 92       	push	r10
 2c2:	bf 92       	push	r11
 2c4:	cf 92       	push	r12
 2c6:	df 92       	push	r13
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	ec 01       	movw	r28, r24
 2d2:	68 81       	ld	r22, Y
 2d4:	79 81       	ldd	r23, Y+1	; 0x01
 2d6:	8a 81       	ldd	r24, Y+2	; 0x02
 2d8:	9b 81       	ldd	r25, Y+3	; 0x03
 2da:	61 15       	cp	r22, r1
 2dc:	71 05       	cpc	r23, r1
 2de:	81 05       	cpc	r24, r1
 2e0:	91 05       	cpc	r25, r1
 2e2:	21 f4       	brne	.+8      	; 0x2ec <do_rand+0x30>
 2e4:	64 e2       	ldi	r22, 0x24	; 36
 2e6:	79 ed       	ldi	r23, 0xD9	; 217
 2e8:	8b e5       	ldi	r24, 0x5B	; 91
 2ea:	97 e0       	ldi	r25, 0x07	; 7
 2ec:	2d e1       	ldi	r18, 0x1D	; 29
 2ee:	33 ef       	ldi	r19, 0xF3	; 243
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	0e 94 ba 01 	call	0x374	; 0x374 <__divmodsi4>
 2f8:	49 01       	movw	r8, r18
 2fa:	5a 01       	movw	r10, r20
 2fc:	9b 01       	movw	r18, r22
 2fe:	ac 01       	movw	r20, r24
 300:	a7 ea       	ldi	r26, 0xA7	; 167
 302:	b1 e4       	ldi	r27, 0x41	; 65
 304:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__muluhisi3>
 308:	6b 01       	movw	r12, r22
 30a:	7c 01       	movw	r14, r24
 30c:	ac ee       	ldi	r26, 0xEC	; 236
 30e:	b4 ef       	ldi	r27, 0xF4	; 244
 310:	a5 01       	movw	r20, r10
 312:	94 01       	movw	r18, r8
 314:	0e 94 e7 01 	call	0x3ce	; 0x3ce <__mulohisi3>
 318:	dc 01       	movw	r26, r24
 31a:	cb 01       	movw	r24, r22
 31c:	8c 0d       	add	r24, r12
 31e:	9d 1d       	adc	r25, r13
 320:	ae 1d       	adc	r26, r14
 322:	bf 1d       	adc	r27, r15
 324:	b7 ff       	sbrs	r27, 7
 326:	03 c0       	rjmp	.+6      	; 0x32e <do_rand+0x72>
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	a1 09       	sbc	r26, r1
 32c:	b0 48       	sbci	r27, 0x80	; 128
 32e:	88 83       	st	Y, r24
 330:	99 83       	std	Y+1, r25	; 0x01
 332:	aa 83       	std	Y+2, r26	; 0x02
 334:	bb 83       	std	Y+3, r27	; 0x03
 336:	9f 77       	andi	r25, 0x7F	; 127
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	bf 90       	pop	r11
 346:	af 90       	pop	r10
 348:	9f 90       	pop	r9
 34a:	8f 90       	pop	r8
 34c:	08 95       	ret

0000034e <rand_r>:
 34e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <do_rand>
 352:	08 95       	ret

00000354 <rand>:
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 5e 01 	call	0x2bc	; 0x2bc <do_rand>
 35c:	08 95       	ret

0000035e <srand>:
 35e:	a0 e0       	ldi	r26, 0x00	; 0
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 366:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 36e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 372:	08 95       	ret

00000374 <__divmodsi4>:
 374:	05 2e       	mov	r0, r21
 376:	97 fb       	bst	r25, 7
 378:	1e f4       	brtc	.+6      	; 0x380 <__divmodsi4+0xc>
 37a:	00 94       	com	r0
 37c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__negsi2>
 380:	57 fd       	sbrc	r21, 7
 382:	07 d0       	rcall	.+14     	; 0x392 <__divmodsi4_neg2>
 384:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__udivmodsi4>
 388:	07 fc       	sbrc	r0, 7
 38a:	03 d0       	rcall	.+6      	; 0x392 <__divmodsi4_neg2>
 38c:	4e f4       	brtc	.+18     	; 0x3a0 <__divmodsi4_exit>
 38e:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__negsi2>

00000392 <__divmodsi4_neg2>:
 392:	50 95       	com	r21
 394:	40 95       	com	r20
 396:	30 95       	com	r19
 398:	21 95       	neg	r18
 39a:	3f 4f       	sbci	r19, 0xFF	; 255
 39c:	4f 4f       	sbci	r20, 0xFF	; 255
 39e:	5f 4f       	sbci	r21, 0xFF	; 255

000003a0 <__divmodsi4_exit>:
 3a0:	08 95       	ret

000003a2 <__negsi2>:
 3a2:	90 95       	com	r25
 3a4:	80 95       	com	r24
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__muluhisi3>:
 3b2:	0e 94 0e 02 	call	0x41c	; 0x41c <__umulhisi3>
 3b6:	a5 9f       	mul	r26, r21
 3b8:	90 0d       	add	r25, r0
 3ba:	b4 9f       	mul	r27, r20
 3bc:	90 0d       	add	r25, r0
 3be:	a4 9f       	mul	r26, r20
 3c0:	80 0d       	add	r24, r0
 3c2:	91 1d       	adc	r25, r1
 3c4:	11 24       	eor	r1, r1
 3c6:	08 95       	ret

000003c8 <__mulshisi3>:
 3c8:	b7 ff       	sbrs	r27, 7
 3ca:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__muluhisi3>

000003ce <__mulohisi3>:
 3ce:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__muluhisi3>
 3d2:	82 1b       	sub	r24, r18
 3d4:	93 0b       	sbc	r25, r19
 3d6:	08 95       	ret

000003d8 <__udivmodsi4>:
 3d8:	a1 e2       	ldi	r26, 0x21	; 33
 3da:	1a 2e       	mov	r1, r26
 3dc:	aa 1b       	sub	r26, r26
 3de:	bb 1b       	sub	r27, r27
 3e0:	fd 01       	movw	r30, r26
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <__udivmodsi4_ep>

000003e4 <__udivmodsi4_loop>:
 3e4:	aa 1f       	adc	r26, r26
 3e6:	bb 1f       	adc	r27, r27
 3e8:	ee 1f       	adc	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	a2 17       	cp	r26, r18
 3ee:	b3 07       	cpc	r27, r19
 3f0:	e4 07       	cpc	r30, r20
 3f2:	f5 07       	cpc	r31, r21
 3f4:	20 f0       	brcs	.+8      	; 0x3fe <__udivmodsi4_ep>
 3f6:	a2 1b       	sub	r26, r18
 3f8:	b3 0b       	sbc	r27, r19
 3fa:	e4 0b       	sbc	r30, r20
 3fc:	f5 0b       	sbc	r31, r21

000003fe <__udivmodsi4_ep>:
 3fe:	66 1f       	adc	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	1a 94       	dec	r1
 408:	69 f7       	brne	.-38     	; 0x3e4 <__udivmodsi4_loop>
 40a:	60 95       	com	r22
 40c:	70 95       	com	r23
 40e:	80 95       	com	r24
 410:	90 95       	com	r25
 412:	9b 01       	movw	r18, r22
 414:	ac 01       	movw	r20, r24
 416:	bd 01       	movw	r22, r26
 418:	cf 01       	movw	r24, r30
 41a:	08 95       	ret

0000041c <__umulhisi3>:
 41c:	a2 9f       	mul	r26, r18
 41e:	b0 01       	movw	r22, r0
 420:	b3 9f       	mul	r27, r19
 422:	c0 01       	movw	r24, r0
 424:	a3 9f       	mul	r26, r19
 426:	70 0d       	add	r23, r0
 428:	81 1d       	adc	r24, r1
 42a:	11 24       	eor	r1, r1
 42c:	91 1d       	adc	r25, r1
 42e:	b2 9f       	mul	r27, r18
 430:	70 0d       	add	r23, r0
 432:	81 1d       	adc	r24, r1
 434:	11 24       	eor	r1, r1
 436:	91 1d       	adc	r25, r1
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
