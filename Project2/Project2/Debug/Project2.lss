
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000228  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf0  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5c  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f3  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050b  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f8  00000000  00000000  0000226f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002367  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
   c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  14:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  18:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  1c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  20:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  28:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  2c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  30:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  34:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  3c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  40:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  44:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  48:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  50:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  54:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  58:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  5c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  60:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  68:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  6c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  70:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  74:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  7c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  80:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  84:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  8c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  90:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  94:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  98:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  9c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  a8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  ac:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  b8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  bc:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c4:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>
  c8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_clear_bss>:
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	a1 30       	cpi	r26, 0x01	; 1
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>
  e8:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  ec:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

000000f0 <__bad_interrupt>:
  f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f4 <QDELAY>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	24 e1       	ldi	r18, 0x14	; 20
  f6:	81 e7       	ldi	r24, 0x71	; 113
  f8:	94 e1       	ldi	r25, 0x14	; 20
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <QDELAY+0x6>
 102:	00 c0       	rjmp	.+0      	; 0x104 <QDELAY+0x10>
 104:	08 95       	ret

00000106 <SET_LEDS>:
	_delay_ms(837.293); // like "CALL QDELAY" in asm
}

void SET_LEDS()
{
	PORTD = COUNT ^ 0b11111111; // Set LEDs according to one's complement of COUNT (since LEDs are active low) (SET_LEDS in asm)	
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10a:	80 95       	com	r24
 10c:	8b b9       	out	0x0b, r24	; 11
 10e:	08 95       	ret

00000110 <CHIRP>:
}

void CHIRP()
{
	for (uint8_t i = 0x2F; i > 0; i--)
 110:	9f e2       	ldi	r25, 0x2F	; 47
 112:	13 c0       	rjmp	.+38     	; 0x13a <CHIRP+0x2a>
	{
		PORTE &= ~(1<<4); // Set buzzer to high
 114:	8e b1       	in	r24, 0x0e	; 14
 116:	8f 7e       	andi	r24, 0xEF	; 239
 118:	8e b9       	out	0x0e, r24	; 14
 11a:	e7 ee       	ldi	r30, 0xE7	; 231
 11c:	f3 e6       	ldi	r31, 0x63	; 99
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <CHIRP+0xe>
 122:	00 c0       	rjmp	.+0      	; 0x124 <CHIRP+0x14>
 124:	00 00       	nop
		_delay_ms(12.788); // like SM_DELAY
		PORTE |= 1<<4; // Set buzzer to low
 126:	8e b1       	in	r24, 0x0e	; 14
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	8e b9       	out	0x0e, r24	; 14
 12c:	e7 ee       	ldi	r30, 0xE7	; 231
 12e:	f3 e6       	ldi	r31, 0x63	; 99
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <CHIRP+0x20>
 134:	00 c0       	rjmp	.+0      	; 0x136 <CHIRP+0x26>
 136:	00 00       	nop
	PORTD = COUNT ^ 0b11111111; // Set LEDs according to one's complement of COUNT (since LEDs are active low) (SET_LEDS in asm)	
}

void CHIRP()
{
	for (uint8_t i = 0x2F; i > 0; i--)
 138:	91 50       	subi	r25, 0x01	; 1
 13a:	91 11       	cpse	r25, r1
 13c:	eb cf       	rjmp	.-42     	; 0x114 <CHIRP+0x4>
		PORTE &= ~(1<<4); // Set buzzer to high
		_delay_ms(12.788); // like SM_DELAY
		PORTE |= 1<<4; // Set buzzer to low
		_delay_ms(12.788); // like SM_DELAY
	}
 13e:	08 95       	ret

00000140 <main>:
void SET_LEDS(); // A function to update LEDs
void CHIRP(); // Plays a chirp from the speaker

int main(void)
{
	DDRA = 0x00; // Port A in input mode
 140:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF; // Enable pull-ups on PA
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	82 b9       	out	0x02, r24	; 2
	
	DDRD = 0xFF; // Port D in output mode
 146:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF; // turn off LEDS (active low)
 148:	8b b9       	out	0x0b, r24	; 11
	
	DDRE = 0b00110000; // Set input/output for Port E
 14a:	90 e3       	ldi	r25, 0x30	; 48
 14c:	9d b9       	out	0x0d, r25	; 13
	PORTE = 0xFF; // ready Port E
 14e:	8e b9       	out	0x0e, r24	; 14
	
    while (1) 
    {
		
		if ((PINA & (1<<6)) == 0) // If button 8 is pressed
 150:	06 99       	sbic	0x00, 6	; 0
 152:	11 c0       	rjmp	.+34     	; 0x176 <main+0x36>
		{
			// Count up (equivalent to CHECK_UP in asm)
			
			if (COUNT >= 30)
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	8e 31       	cpi	r24, 0x1E	; 30
 15a:	28 f0       	brcs	.+10     	; 0x166 <main+0x26>
			{
				COUNT = 0; // wrap around to bottom
 15c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
				CHIRP(); // play tone on speaker
 160:	0e 94 88 00 	call	0x110	; 0x110 <CHIRP>
 164:	03 c0       	rjmp	.+6      	; 0x16c <main+0x2c>
			}
			else
			{
				COUNT++; // increment COUNT
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			
			SET_LEDS(); // update LED states
 16c:	0e 94 83 00 	call	0x106	; 0x106 <SET_LEDS>
			QDELAY(); // wait a bit
 170:	0e 94 7a 00 	call	0xf4	; 0xf4 <QDELAY>
 174:	ed cf       	rjmp	.-38     	; 0x150 <main+0x10>
		}
		else if ((PINA & (1<<5)) == 0) // Else if button 7 is pressed
 176:	05 99       	sbic	0x00, 5	; 0
 178:	12 c0       	rjmp	.+36     	; 0x19e <main+0x5e>
		{
			// Count down (equivalent to CHECK_DOWN in asm)
			
			if (COUNT <= 0)
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 17e:	81 11       	cpse	r24, r1
 180:	06 c0       	rjmp	.+12     	; 0x18e <main+0x4e>
			{
				COUNT = 30; // wrap around to top
 182:	8e e1       	ldi	r24, 0x1E	; 30
 184:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				CHIRP(); // play tone on speaker
 188:	0e 94 88 00 	call	0x110	; 0x110 <CHIRP>
 18c:	03 c0       	rjmp	.+6      	; 0x194 <main+0x54>
			}
			else
			{
				COUNT--; // decrement COUNT
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			
			SET_LEDS(); // update LED states
 194:	0e 94 83 00 	call	0x106	; 0x106 <SET_LEDS>
			QDELAY(); // wait a bit
 198:	0e 94 7a 00 	call	0xf4	; 0xf4 <QDELAY>
 19c:	d9 cf       	rjmp	.-78     	; 0x150 <main+0x10>
		}
		else if ((PINA & (1<<4)) == 0) // Else if button 6 is pressed
 19e:	04 99       	sbic	0x00, 4	; 0
 1a0:	d7 cf       	rjmp	.-82     	; 0x150 <main+0x10>
		{
			// Reset Count (equivalent to RESET_COUNT in asm)
			COUNT = 0;
 1a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			SET_LEDS(); // update LED states
 1a6:	0e 94 83 00 	call	0x106	; 0x106 <SET_LEDS>
			QDELAY(); // wait a bit
 1aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <QDELAY>
 1ae:	d0 cf       	rjmp	.-96     	; 0x150 <main+0x10>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
